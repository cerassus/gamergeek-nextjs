{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var pickRandomGame = function pickRandomGame(database) {\n  var randomIndex = Math.floor(Math.random() * database.length);\n  var game = database[randomIndex];\n  database.splice(randomIndex, 1);\n  console.log(game_database);\n  return getGameDetails(game);\n};\nexport var getGameDetails = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(game) {\n    var apishot, game_details;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id));\n\n          case 3:\n            apishot = _context.sent;\n            _context.next = 6;\n            return apishot.json();\n\n          case 6:\n            game_details = _context.sent;\n            return _context.abrupt(\"return\", getGameScreenshots(game_details));\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {});\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function getGameDetails(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getGameScreenshots = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(game) {\n    var apishot, screenshots, game_screenshots;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/screenshots\"));\n\n          case 3:\n            apishot = _context2.sent;\n            _context2.next = 6;\n            return apishot.json();\n\n          case 6:\n            screenshots = _context2.sent;\n            game_screenshots = screenshots.results.splice(0, 3);\n            return _context2.abrupt(\"return\", game = _objectSpread(_objectSpread({}, game), {}, {\n              id: game.id,\n              name: game.name,\n              altname: game.alternative_names,\n              screenshots: _toConsumableArray(game_screenshots),\n              hints: {\n                developer: game.developers[0].name,\n                released: game.released,\n                genre: game.genres[game.genres.length - 1].name\n              }\n            }));\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            return _context2.abrupt(\"return\", {});\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 11]]);\n  }));\n\n  return function getGameScreenshots(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/global/fetch.js"],"names":["pickRandomGame","database","randomIndex","Math","floor","random","length","game","splice","console","log","game_database","getGameDetails","fetch","id","apishot","json","game_details","getGameScreenshots","screenshots","game_screenshots","results","name","altname","alternative_names","hints","developer","developers","released","genre","genres"],"mappings":";;;;;;;;;AAAA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAc;AACxC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,QAAQ,CAACK,MAApC,CAApB;AACA,MAAMC,IAAI,GAAGN,QAAQ,CAACC,WAAD,CAArB;AACAD,EAAAA,QAAQ,CAACO,MAAT,CAAgBN,WAAhB,EAA6B,CAA7B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYC,aAAZ;AACA,SAAOC,cAAc,CAACL,IAAD,CAArB;AACH,CANM;AAQP,OAAO,IAAMK,cAAc;AAAA,sEAAG,iBAAOL,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAM,KAAK,yCAAkCN,IAAI,CAACO,EAAvC,EAFL;;AAAA;AAEhBC,YAAAA,OAFgB;AAAA;AAAA,mBAGKA,OAAO,CAACC,IAAR,EAHL;;AAAA;AAGhBC,YAAAA,YAHgB;AAAA,6CAIfC,kBAAkB,CAACD,YAAD,CAJH;;AAAA;AAAA;AAAA;AAOtBR,YAAAA,OAAO,CAACC,GAAR;AAPsB,6CAQf,EARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdE,cAAc;AAAA;AAAA;AAAA,GAApB;AAYP,OAAO,IAAMM,kBAAkB;AAAA,uEAAG,kBAAOX,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEJM,KAAK,yCAAkCN,IAAI,CAACO,EAAvC,kBAFD;;AAAA;AAEpBC,YAAAA,OAFoB;AAAA;AAAA,mBAGAA,OAAO,CAACC,IAAR,EAHA;;AAAA;AAGpBG,YAAAA,WAHoB;AAIpBC,YAAAA,gBAJoB,GAIDD,WAAW,CAACE,OAAZ,CAAoBb,MAApB,CAA2B,CAA3B,EAA6B,CAA7B,CAJC;AAAA,8CAKnBD,IAAI,mCACJA,IADI;AAEPO,cAAAA,EAAE,EAAEP,IAAI,CAACO,EAFF;AAGPQ,cAAAA,IAAI,EAAEf,IAAI,CAACe,IAHJ;AAIPC,cAAAA,OAAO,EAAEhB,IAAI,CAACiB,iBAJP;AAKPL,cAAAA,WAAW,qBAAMC,gBAAN,CALJ;AAMPK,cAAAA,KAAK,EAAE;AACHC,gBAAAA,SAAS,EAAEnB,IAAI,CAACoB,UAAL,CAAgB,CAAhB,EAAmBL,IAD3B;AAEHM,gBAAAA,QAAQ,EAAErB,IAAI,CAACqB,QAFZ;AAGHC,gBAAAA,KAAK,EAAEtB,IAAI,CAACuB,MAAL,CAAYvB,IAAI,CAACuB,MAAL,CAAYxB,MAAZ,GAAmB,CAA/B,EAAkCgB;AAHtC;AANA,cALe;;AAAA;AAAA;AAAA;AAmB1Bb,YAAAA,OAAO,CAACC,GAAR;AAnB0B,8CAoBnB,EApBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBQ,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["export const pickRandomGame = (database) => {\n    const randomIndex = Math.floor(Math.random() * database.length)\n    const game = database[randomIndex]\n    database.splice(randomIndex, 1)\n    console.log(game_database)\n    return getGameDetails(game)\n}\n\nexport const getGameDetails = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}\n  \nexport const getGameScreenshots = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n        const screenshots = await apishot.json()\n        const game_screenshots = screenshots.results.splice(0,3)\n        return game = {\n            ...game,\n            id: game.id,\n            name: game.name,\n            altname: game.alternative_names,\n            screenshots: [...game_screenshots],\n            hints: {\n                developer: game.developers[0].name,\n                released: game.released,\n                genre: game.genres[game.genres.length-1].name,\n            }\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}"]},"metadata":{},"sourceType":"module"}