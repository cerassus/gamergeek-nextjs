{"ast":null,"code":"import { getGameDetails } from \"../global/fetchGameDetails\";\nimport store from \"./store\";\nconst START_GAME = \"START_GAME\";\nconst RESUME_GAME = \"RESUME_GAME\";\nconst END_GAME = \"END_GAME\";\nconst SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nconst NEW_ANSWER = \"NEW_ANSWER\";\nconst CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nconst START_LOADING = \"START_LOADING\";\nconst SHOW_HINT = \"SHOW_HINT\";\nconst NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nconst REMOVE_ITEM = \"REMOVE_ITEM\";\nconst SHOW_POPUP = \"SHOW_POPUP\";\nconst SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\nconst TEST = \"TEST\";\n\nconst startGame = () => ({\n  type: START_GAME\n});\n\nconst resumeGame = () => ({\n  type: RESUME_GAME\n});\n\nconst endGame = () => ({\n  type: END_GAME\n});\n\nconst pushNewAnswer = answer => ({\n  type: NEW_ANSWER,\n  answer\n});\n\nconst showRandomGame = game => ({\n  type: SHOW_RANDOM_GAME,\n  game\n});\n\nconst startLoading = () => ({\n  type: START_LOADING\n});\n\nconst showHint = hint => ({\n  type: SHOW_HINT,\n  hint\n});\n\nconst clearUserScore = () => ({\n  type: CLEAR_USER_SCORE\n});\n\nconst newGameDatabase = database => ({\n  type: NEW_GAME_DATABASE,\n  database\n});\n\nconst removeItemFromDatabase = index => ({\n  type: REMOVE_ITEM,\n  index\n});\n\nconst showPopup = popup => ({\n  type: SHOW_POPUP,\n  popup\n});\n\nconst setHintCounter = () => ({\n  type: SET_HINT_COUNTER\n});\n\nconst test = payload => ({\n  type: TEST,\n  payload\n});\n\nfunction loadNewQuestion(difficulty = 0) {\n  return async function (dispatch) {\n    const game_database = store.getState().game_database;\n    const randomIndex = Math.floor(Math.random() * game_database.length);\n\n    if (game_database.length === 0) {\n      difficulty ? fetchNewGameDatabase(difficulty - 1) : dispatch(endGame());\n    } else {\n      dispatch(showRandomGame((await getGameDetails(game_database[randomIndex])) || 'error') || 'error');\n      dispatch(removeItemFromDatabase(randomIndex));\n    }\n\n    async function fetchNewGameDatabase(difficulty) {\n      const database_array = [];\n      let page = 0;\n\n      switch (difficulty) {\n        case 0:\n          {\n            page = 1;\n            break;\n          }\n\n        case 1:\n          {\n            page = 4;\n            break;\n          }\n\n        case 2:\n          {\n            page = 7;\n            break;\n          }\n\n        default:\n          return [];\n      }\n\n      for (let i = 0; i < 3; i++) {\n        try {\n          const apishot = await fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n          const data = await apishot.json();\n          database_array.push(data.results.map(game => game = game.id));\n        } catch (error) {\n          console.log(error);\n          return [];\n        }\n      }\n\n      await dispatch(newGameDatabase(database_array.flat()));\n      return dispatch(loadNewQuestion());\n    }\n  };\n}\n\nexport { START_GAME, RESUME_GAME, END_GAME, SHOW_RANDOM_GAME, NEW_ANSWER, CLEAR_USER_SCORE, START_LOADING, SHOW_HINT, NEW_GAME_DATABASE, REMOVE_ITEM, SHOW_POPUP, SET_HINT_COUNTER, TEST, startGame, resumeGame, endGame, pushNewAnswer, showRandomGame, startLoading, showHint, clearUserScore, newGameDatabase, removeItemFromDatabase, showPopup, setHintCounter, test, loadNewQuestion };","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/redux/actions.js"],"names":["getGameDetails","store","START_GAME","RESUME_GAME","END_GAME","SHOW_RANDOM_GAME","NEW_ANSWER","CLEAR_USER_SCORE","START_LOADING","SHOW_HINT","NEW_GAME_DATABASE","REMOVE_ITEM","SHOW_POPUP","SET_HINT_COUNTER","TEST","startGame","type","resumeGame","endGame","pushNewAnswer","answer","showRandomGame","game","startLoading","showHint","hint","clearUserScore","newGameDatabase","database","removeItemFromDatabase","index","showPopup","popup","setHintCounter","test","payload","loadNewQuestion","difficulty","dispatch","game_database","getState","randomIndex","Math","floor","random","length","fetchNewGameDatabase","database_array","page","i","apishot","fetch","data","json","push","results","map","id","error","console","log","flat"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4BAA/B;AACA,OAAOC,KAAP,MAAmB,SAAnB;AAEA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,MAAMC,IAAI,GAAG,MAAb;;AAEA,MAAMC,SAAS,GAAG,OAAO;AACrBC,EAAAA,IAAI,EAAEd;AADe,CAAP,CAAlB;;AAIA,MAAMe,UAAU,GAAG,OAAO;AACtBD,EAAAA,IAAI,EAAEb;AADgB,CAAP,CAAnB;;AAIA,MAAMe,OAAO,GAAG,OAAO;AACnBF,EAAAA,IAAI,EAAEZ;AADa,CAAP,CAAhB;;AAIA,MAAMe,aAAa,GAAIC,MAAD,KAAa;AAC/BJ,EAAAA,IAAI,EAAEV,UADyB;AAE/Bc,EAAAA;AAF+B,CAAb,CAAtB;;AAKA,MAAMC,cAAc,GAAIC,IAAD,KAAW;AAC9BN,EAAAA,IAAI,EAAEX,gBADwB;AAE9BiB,EAAAA;AAF8B,CAAX,CAAvB;;AAIA,MAAMC,YAAY,GAAG,OAAO;AACxBP,EAAAA,IAAI,EAAER;AADkB,CAAP,CAArB;;AAIA,MAAMgB,QAAQ,GAAIC,IAAD,KAAW;AACxBT,EAAAA,IAAI,EAAEP,SADkB;AAExBgB,EAAAA;AAFwB,CAAX,CAAjB;;AAKA,MAAMC,cAAc,GAAG,OAAO;AAC1BV,EAAAA,IAAI,EAAET;AADoB,CAAP,CAAvB;;AAIA,MAAMoB,eAAe,GAAIC,QAAD,KAAe;AACnCZ,EAAAA,IAAI,EAAEN,iBAD6B;AAEnCkB,EAAAA;AAFmC,CAAf,CAAxB;;AAKA,MAAMC,sBAAsB,GAAIC,KAAD,KAAY;AACvCd,EAAAA,IAAI,EAAEL,WADiC;AAEvCmB,EAAAA;AAFuC,CAAZ,CAA/B;;AAKA,MAAMC,SAAS,GAAIC,KAAD,KAAY;AAC1BhB,EAAAA,IAAI,EAAEJ,UADoB;AAE1BoB,EAAAA;AAF0B,CAAZ,CAAlB;;AAKA,MAAMC,cAAc,GAAG,OAAO;AAC1BjB,EAAAA,IAAI,EAAEH;AADoB,CAAP,CAAvB;;AAIA,MAAMqB,IAAI,GAAIC,OAAD,KAAc;AACvBnB,EAAAA,IAAI,EAAEF,IADiB;AAEvBqB,EAAAA;AAFuB,CAAd,CAAb;;AAKA,SAASC,eAAT,CAAyBC,UAAU,GAAG,CAAtC,EAAyC;AACrC,SAAO,gBAAeC,QAAf,EAAyB;AAC5B,UAAMC,aAAa,GAAGtC,KAAK,CAACuC,QAAN,GAAiBD,aAAvC;AACA,UAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,aAAa,CAACM,MAAzC,CAApB;;AACA,QAAGN,aAAa,CAACM,MAAd,KAAyB,CAA5B,EAA+B;AAC3BR,MAAAA,UAAU,GACJS,oBAAoB,CAACT,UAAU,GAAC,CAAZ,CADhB,GAEJC,QAAQ,CAACpB,OAAO,EAAR,CAFd;AAGH,KAJD,MAIO;AACLoB,MAAAA,QAAQ,CAACjB,cAAc,CAAC,OAAMrB,cAAc,CAACuC,aAAa,CAACE,WAAD,CAAd,CAApB,KAAoD,OAArD,CAAd,IAA8E,OAA/E,CAAR;AACAH,MAAAA,QAAQ,CAACT,sBAAsB,CAACY,WAAD,CAAvB,CAAR;AACD;;AACD,mBAAeK,oBAAf,CAAoCT,UAApC,EAAgD;AACxC,YAAMU,cAAc,GAAG,EAAvB;AACA,UAAIC,IAAI,GAAG,CAAX;;AACA,cAAOX,UAAP;AACI,aAAK,CAAL;AAAQ;AAACW,YAAAA,IAAI,GAAG,CAAP;AAAU;AAAO;;AAC1B,aAAK,CAAL;AAAQ;AAACA,YAAAA,IAAI,GAAG,CAAP;AAAU;AAAO;;AAC1B,aAAK,CAAL;AAAQ;AAACA,YAAAA,IAAI,GAAG,CAAP;AAAU;AAAO;;AAC1B;AAAS,iBAAO,EAAP;AAJb;;AAMA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkBA,CAAC,EAAnB,EAAuB;AACnB,YAAI;AACA,gBAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,sCAAqCH,IAAI,GAACC,CAAE,eAA9C,CAA3B;AACA,gBAAMG,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAnB;AACAN,UAAAA,cAAc,CAACO,IAAf,CAAoBF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBlC,IAAI,IAAIA,IAAI,GAAGA,IAAI,CAACmC,EAArC,CAApB;AACH,SAJD,CAKA,OAAMC,KAAN,EAAa;AACTC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,iBAAO,EAAP;AACH;AACJ;;AACD,YAAMpB,QAAQ,CAACX,eAAe,CAACoB,cAAc,CAACc,IAAf,EAAD,CAAhB,CAAd;AACA,aAAOvB,QAAQ,CAACF,eAAe,EAAhB,CAAf;AACH;AACR,GAlCD;AAmCH;;AAED,SACKlC,UADL,EACiBC,WADjB,EAC8BC,QAD9B,EACuCC,gBADvC,EACyDC,UADzD,EACqEC,gBADrE,EAEKC,aAFL,EAEoBC,SAFpB,EAE+BC,iBAF/B,EAEkDC,WAFlD,EAE+DC,UAF/D,EAE4EC,gBAF5E,EAE8FC,IAF9F,EAGKC,SAHL,EAGgBE,UAHhB,EAG4BC,OAH5B,EAGqCC,aAHrC,EAGoDE,cAHpD,EAGoEE,YAHpE,EAGiFC,QAHjF,EAIKE,cAJL,EAIqBC,eAJrB,EAIuCE,sBAJvC,EAIgEE,SAJhE,EAI4EE,cAJ5E,EAKKC,IALL,EAKYE,eALZ","sourcesContent":["import { getGameDetails } from \"../global/fetchGameDetails\"\nimport store  from \"./store\"\n\nconst START_GAME = \"START_GAME\";\nconst RESUME_GAME = \"RESUME_GAME\";\nconst END_GAME = \"END_GAME\";\nconst SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nconst NEW_ANSWER = \"NEW_ANSWER\";\nconst CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nconst START_LOADING = \"START_LOADING\";\nconst SHOW_HINT = \"SHOW_HINT\";\nconst NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nconst REMOVE_ITEM = \"REMOVE_ITEM\";\nconst SHOW_POPUP = \"SHOW_POPUP\";\nconst SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\n\nconst TEST = \"TEST\";\n\nconst startGame = () => ({\n    type: START_GAME,\n})\n\nconst resumeGame = () => ({\n    type: RESUME_GAME,\n})\n\nconst endGame = () => ({\n    type: END_GAME,\n})\n\nconst pushNewAnswer = (answer) => ({\n    type: NEW_ANSWER,\n    answer,\n})\n\nconst showRandomGame = (game) => ({\n    type: SHOW_RANDOM_GAME,\n    game,\n})\nconst startLoading = () => ({\n    type: START_LOADING,\n})\n\nconst showHint = (hint) => ({\n    type: SHOW_HINT,\n    hint,\n})\n\nconst clearUserScore = () => ({\n    type: CLEAR_USER_SCORE,\n})\n\nconst newGameDatabase = (database) => ({\n    type: NEW_GAME_DATABASE,\n    database,\n})\n\nconst removeItemFromDatabase = (index) => ({\n    type: REMOVE_ITEM,\n    index,\n})\n\nconst showPopup = (popup) => ({\n    type: SHOW_POPUP,\n    popup,\n})\n\nconst setHintCounter = () => ({\n    type: SET_HINT_COUNTER,\n})\n\nconst test = (payload) => ({\n    type: TEST,\n    payload,\n})\n\nfunction loadNewQuestion(difficulty = 0) {\n    return async function(dispatch) {\n        const game_database = store.getState().game_database\n        const randomIndex = Math.floor(Math.random() * game_database.length)\n        if(game_database.length === 0) {\n            difficulty\n                ? fetchNewGameDatabase(difficulty-1)\n                : dispatch(endGame()) \n        } else {\n          dispatch(showRandomGame(await getGameDetails(game_database[randomIndex]) || 'error')|| 'error')\n          dispatch(removeItemFromDatabase(randomIndex))\n        }\n        async function fetchNewGameDatabase(difficulty) {\n                const database_array = []\n                let page = 0\n                switch(difficulty) {\n                    case 0: {page = 1; break;}\n                    case 1: {page = 4; break;}\n                    case 2: {page = 7; break;}\n                    default: return []\n                }\n                for(let i=0; i<3; i++) {\n                    try {\n                        const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n                        const data = await apishot.json()\n                        database_array.push(data.results.map(game => game = game.id))\n                    }\n                    catch(error) {\n                        console.log(error)\n                        return []\n                    }\n                }\n                await dispatch(newGameDatabase(database_array.flat()))\n                return dispatch(loadNewQuestion())\n            }\n    }\n}\n\nexport {\n     START_GAME, RESUME_GAME, END_GAME,SHOW_RANDOM_GAME, NEW_ANSWER, CLEAR_USER_SCORE ,\n     START_LOADING, SHOW_HINT, NEW_GAME_DATABASE, REMOVE_ITEM, SHOW_POPUP , SET_HINT_COUNTER ,TEST,\n     startGame, resumeGame, endGame ,pushNewAnswer, showRandomGame, startLoading,showHint ,\n     clearUserScore, newGameDatabase , removeItemFromDatabase , showPopup , setHintCounter,\n     test , loadNewQuestion }\n\n\n"]},"metadata":{},"sourceType":"module"}