{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport * as actions from \"./actions\";\n\nconst random_game = (state = \"\", action) => action.type === actions.SHOW_RANDOM_GAME ? action.game : state; // const user_score = (state = [], action) => action.type === actions.NEW_ANSWER ? [...state, action.answer] : state\n\n\nconst user_score = (state = [], action) => {\n  if (action.type === actions.NEW_ANSWER) {\n    console.log([...state, action.answer]);\n    return [...state, action.answer];\n  } else {\n    return state;\n  }\n};\n\nconst hints_array = (state = [], action) => {\n  switch (action.type) {\n    case actions.SHOW_HINT:\n      {\n        console.log([...state, action.hint]);\n        return [...state, action.hint];\n      }\n\n    case actions.HIDE_HINT:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst is_game_started = (state = false, action) => {\n  switch (action.type) {\n    case actions.START_GAME:\n      {\n        console.log('started');\n        return true;\n      }\n\n    case actions.END_GAME:\n      {\n        console.log('ended');\n        return false;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst is_game_loading = (state = false, action) => {\n  switch (action.type) {\n    case actions.LOAD_NEW_ITEM:\n      {\n        console.log('loading start');\n        return true;\n      }\n\n    case actions.RESUME_GAME:\n      {\n        console.log('loading end');\n        return false;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  is_game_started,\n  random_game,\n  user_score,\n  hints_array,\n  is_game_loading\n});","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/redux/reducers.js"],"names":["combineReducers","actions","random_game","state","action","type","SHOW_RANDOM_GAME","game","user_score","NEW_ANSWER","console","log","answer","hints_array","SHOW_HINT","hint","HIDE_HINT","is_game_started","START_GAME","END_GAME","is_game_loading","LOAD_NEW_ITEM","RESUME_GAME"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwBA,MAAM,CAACC,IAAP,KAAgBJ,OAAO,CAACK,gBAAxB,GAA2CF,MAAM,CAACG,IAAlD,GAAyDJ,KAArG,C,CAEA;;;AAEA,MAAMK,UAAU,GAAG,CAACL,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACvC,MAAGA,MAAM,CAACC,IAAP,KAAgBJ,OAAO,CAACQ,UAA3B,EAAuC;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGR,KAAJ,EAAWC,MAAM,CAACQ,MAAlB,CAAZ;AACA,WAAO,CAAC,GAAGT,KAAJ,EAAWC,MAAM,CAACQ,MAAlB,CAAP;AACH,GAHD,MAGO;AACH,WAAOT,KAAP;AACH;AACJ,CAPD;;AASA,MAAMU,WAAW,GAAG,CAACV,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACxC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKJ,OAAO,CAACa,SAAb;AAAwB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGR,KAAJ,EAAWC,MAAM,CAACW,IAAlB,CAAZ;AACA,eAAO,CAAC,GAAGZ,KAAJ,EAAWC,MAAM,CAACW,IAAlB,CAAP;AACH;;AACD,SAAKd,OAAO,CAACe,SAAb;AAAwB,aAAO,EAAP;;AACxB;AAAS,aAAOb,KAAP;AANb;AAQH,CATD;;AAWA,MAAMc,eAAe,GAAG,CAACd,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKJ,OAAO,CAACiB,UAAb;AAAyB;AAACR,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAAwB,eAAO,IAAP;AAAY;;AAC9D,SAAKV,OAAO,CAACkB,QAAb;AAAwB;AAACT,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAAsB,eAAO,KAAP;AAAa;;AAC5D;AAAS,aAAOR,KAAP;AAHb;AAKH,CAND;;AAQA,MAAMiB,eAAe,GAAG,CAACjB,KAAK,GAAG,KAAT,EAAgBC,MAAhB,KAA2B;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKJ,OAAO,CAACoB,aAAb;AAA6B;AAACX,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAA8B,eAAO,IAAP;AAAY;;AACxE,SAAKV,OAAO,CAACqB,WAAb;AAA2B;AAACZ,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA4B,eAAO,KAAP;AAAa;;AACrE;AAAS,aAAOR,KAAP;AAHb;AAKH,CAND;;AASA,eAAeH,eAAe,CAAC;AAC7BiB,EAAAA,eAD6B;AAE7Bf,EAAAA,WAF6B;AAG7BM,EAAAA,UAH6B;AAI7BK,EAAAA,WAJ6B;AAK7BO,EAAAA;AAL6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\"\nimport * as actions from \"./actions\"\n\nconst random_game = (state = \"\", action) => action.type === actions.SHOW_RANDOM_GAME ? action.game : state\n\n// const user_score = (state = [], action) => action.type === actions.NEW_ANSWER ? [...state, action.answer] : state\n\nconst user_score = (state = [], action) => {\n    if(action.type === actions.NEW_ANSWER) {\n        console.log([...state, action.answer])\n        return [...state, action.answer]\n    } else {\n        return state\n    }\n}\n\nconst hints_array = (state = [], action) => {\n    switch(action.type) {\n        case actions.SHOW_HINT: {\n            console.log([...state, action.hint])\n            return [...state, action.hint]\n        }\n        case actions.HIDE_HINT: return []\n        default: return state\n    }\n}\n\nconst is_game_started = (state = false, action) => {\n    switch(action.type) {\n        case actions.START_GAME: {console.log('started'); return true}\n        case actions.END_GAME:  {console.log('ended'); return false}\n        default: return state\n    }\n}\n\nconst is_game_loading = (state = false, action) => {\n    switch(action.type) {\n        case actions.LOAD_NEW_ITEM:  {console.log('loading start'); return true}\n        case actions.RESUME_GAME:  {console.log('loading end'); return false}\n        default: return state\n    }\n}\n\n\nexport default combineReducers({\n  is_game_started,\n  random_game,\n  user_score,\n  hints_array,\n  is_game_loading,\n})"]},"metadata":{},"sourceType":"module"}