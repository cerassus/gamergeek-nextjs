{"ast":null,"code":"import { connect } from \"react-redux\";\nimport TableBottom from \"../components/main/challenge/TableBottom\";\nimport { newAnswer as _newAnswer } from \"../redux/actions\";\n\nvar mapState = function mapState(state) {\n  return {\n    game_status: state.game_status,\n    random_game: state.random_game\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    newAnswer: function newAnswer(answer) {\n      return dispatch(_newAnswer(answer));\n    },\n    getRandomGame: function (_getRandomGame) {\n      function getRandomGame(_x) {\n        return _getRandomGame.apply(this, arguments);\n      }\n\n      getRandomGame.toString = function () {\n        return _getRandomGame.toString();\n      };\n\n      return getRandomGame;\n    }(function (obj) {\n      return dispatch(getRandomGame(obj));\n    })\n  };\n};\n\nexport default connect(mapState, mapDispatch)(TableBottom);","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/containers/TableBottom.js"],"names":["connect","TableBottom","newAnswer","mapState","state","game_status","random_game","mapDispatch","dispatch","answer","getRandomGame","obj"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,SAASC,SAAS,IAATA,UAAT,QAA0B,kBAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAK;AACvBC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADI;AAEvBC,IAAAA,WAAW,EAAEF,KAAK,CAACE;AAFI,GAAL;AAAA,CAAtB;;AAKA,IAAMC,WAAW,GAAI,SAAfA,WAAe,CAAAC,QAAQ;AAAA,SAAK;AAChCN,IAAAA,SAAS,EAAE,mBAACO,MAAD;AAAA,aAAYD,QAAQ,CAACN,UAAS,CAACO,MAAD,CAAV,CAApB;AAAA,KADqB;AAEhCC,IAAAA,aAAa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAE,UAACC,GAAD;AAAA,aAASH,QAAQ,CAACE,aAAa,CAACC,GAAD,CAAd,CAAjB;AAAA,KAAF;AAFmB,GAAL;AAAA,CAA7B;;AAKA,eAAeX,OAAO,CAACG,QAAD,EAAWI,WAAX,CAAP,CAA+BN,WAA/B,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport TableBottom from \"../components/main/challenge/TableBottom\"\nimport { newAnswer } from \"../redux/actions\"\n\nconst mapState = state => ({\n    game_status: state.game_status,\n    random_game: state.random_game,\n})\n\nconst mapDispatch  = dispatch => ({\n  newAnswer: (answer) => dispatch(newAnswer(answer)),\n  getRandomGame: (obj) => dispatch(getRandomGame(obj)),\n})\n\nexport default connect(mapState, mapDispatch)(TableBottom);\n"]},"metadata":{},"sourceType":"module"}