{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/Table.js\";\nimport Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport React from \"react\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\nconst game_difficulty = [\"easy\", \"medium\", \"hard\"];\nexport default function TableTop({\n  game_status,\n  random_game,\n  screenshots_loaded,\n  startGame,\n  stopGame,\n  getRandomGame,\n  newAnswer,\n  screenshotsAreLoading\n}) {\n  const [difficultyChoice, showDifficultyChoice] = React.useState(false);\n\n  const stop = () => {\n    showDifficultyChoice(false);\n    return stopGame();\n  };\n\n  const start = async difficulty => {\n    screenshotsAreLoading();\n    const randomik = await pickRandomGame(game_database);\n    getRandomGame(randomik);\n    difficulty && startGame(difficulty);\n  };\n\n  const checkAnswer = async answer => {\n    const user_answer = answer.target.innerText === random_game.name ? {\n      title: random_game.name,\n      time: 3,\n      score: 2000,\n      correct: true\n    } : {\n      title: random_game.name,\n      time: 3,\n      score: 0,\n      correct: false\n    };\n    newAnswer(user_answer);\n    start();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      top: true,\n      children: screenshots_loaded !== \"loading\" ? game_status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          href: \"/\",\n          children: \"get a hint\"\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: start,\n          children: \"skip\"\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: stop,\n          children: \"quit\"\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : difficultyChoice ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          children: [\"set difficulty:\", \" \"]\n        }, Math.random() * 10000, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), game_difficulty.map((diff, i) => /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: () => start({\n            i\n          }),\n          children: diff\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Typography, {\n        link: true,\n        onClick: () => showDifficultyChoice(true),\n        children: \"start a new challenge\"\n      }, 123432, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        link: true,\n        children: \"loading\"\n      }, Math.random() * 10000, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      bottom: true,\n      children: game_status && random_game.answers && screenshots_loaded === \"loaded\" ? random_game.answers.map((answer, i) => /*#__PURE__*/_jsxDEV(Typography, {\n        answer: true,\n        onClick: answer => checkAnswer(answer),\n        children: answer\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }, this)) : ``\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export default function TableTop({ game_status, startGame, stopGame }) {\n//   const [difficultyChoice, showDifficultyChoice] = React.useState(false)\n//   const stop = () => {\n//     showDifficultyChoice(false);\n//     return stopGame();\n//   }\n//   return (\n//     <Table top>\n//       {(!game_status && difficultyChoice) && (\n//         <>\n//         <Typography link>set difficulty: </Typography>\n//         <Typography link onClick={() => startGame(0)}>easy</Typography>\n//         <Typography link onClick={() => startGame(1)}>medium</Typography>\n//         <Typography link onClick={() => startGame(2)}>hard</Typography>\n//         </>\n//       )}\n//       {(!game_status && !difficultyChoice) && (\n//         <Typography link onClick={() => showDifficultyChoice(true)}>start a new challenge</Typography>\n//       )}\n//       {game_status && (\n//         <>\n//           <Typography link href=\"/\">get a hint</Typography>\n//           <Typography link href=\"/\">skip</Typography>\n//           <Typography link onClick={stop}>quit</Typography>\n//         </>\n//       )}\n//     </Table>\n//   );\n// }","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/Table.js"],"names":["Table","Typography","React","pickRandomGame","game_database","game_difficulty","TableTop","game_status","random_game","screenshots_loaded","startGame","stopGame","getRandomGame","newAnswer","screenshotsAreLoading","difficultyChoice","showDifficultyChoice","useState","stop","start","difficulty","randomik","checkAnswer","answer","user_answer","target","innerText","name","title","time","score","correct","Math","random","map","diff","i","answers"],"mappings":"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","sourcesContent":["import Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport React from \"react\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\n\nconst game_difficulty = [\"easy\", \"medium\", \"hard\"];\n\nexport default function TableTop({\n  game_status,\n  random_game,\n  screenshots_loaded,\n  startGame,\n  stopGame,\n  getRandomGame,\n  newAnswer,\n  screenshotsAreLoading,\n}) {\n  const [difficultyChoice, showDifficultyChoice] = React.useState(false);\n  const stop = () => {\n    showDifficultyChoice(false);\n    return stopGame();\n  };\n  const start = async (difficulty) => {\n    screenshotsAreLoading();\n    const randomik = await pickRandomGame(game_database);\n    getRandomGame(randomik);\n    difficulty && startGame(difficulty);\n  };\n  const checkAnswer = async (answer) => {\n    const user_answer =\n      answer.target.innerText === random_game.name\n        ? {\n            title: random_game.name,\n            time: 3,\n            score: 2000,\n            correct: true,\n          }\n        : {\n            title: random_game.name,\n            time: 3,\n            score: 0,\n            correct: false,\n          };\n    newAnswer(user_answer);\n    start();\n  };\n  return (\n    <>\n      <Table top>\n        {screenshots_loaded !== \"loading\" ?\n          (game_status ? (\n            <>\n              <Typography key={Math.random() * 10000} link href=\"/\">\n                get a hint\n              </Typography>\n              <Typography key={Math.random() * 10000} link onClick={start}>\n                skip\n              </Typography>\n              <Typography key={Math.random() * 10000} link onClick={stop}>\n                quit\n              </Typography>\n            </>\n          ) : difficultyChoice ? (\n            <>\n              <Typography key={Math.random() * 10000} link>\n                set difficulty:{\" \"}\n              </Typography>\n              {game_difficulty.map((diff, i) => (\n                <Typography\n                  key={Math.random() * 10000}\n                  link\n                  onClick={() => start({ i })}\n                >\n                  {diff}\n                </Typography>\n              ))}\n            </>\n          ) : (\n            <Typography\n              key={123432}\n              link\n              onClick={() => showDifficultyChoice(true)}\n            >\n              start a new challenge\n            </Typography>\n          )) : \n          <Typography\n          key={Math.random() * 10000}\n          link\n        >\n          loading\n        </Typography>}\n      </Table>\n      <Table bottom>\n        {game_status && random_game.answers && screenshots_loaded === \"loaded\"\n          ? random_game.answers.map((answer, i) => (\n              <Typography\n                key={i}\n                answer\n                onClick={(answer) => checkAnswer(answer)}\n              >\n                {answer}\n              </Typography>\n            ))\n          : ``}\n      </Table>\n    </>\n  );\n}\n\n// export default function TableTop({ game_status, startGame, stopGame }) {\n//   const [difficultyChoice, showDifficultyChoice] = React.useState(false)\n//   const stop = () => {\n//     showDifficultyChoice(false);\n//     return stopGame();\n//   }\n//   return (\n//     <Table top>\n//       {(!game_status && difficultyChoice) && (\n//         <>\n//         <Typography link>set difficulty: </Typography>\n//         <Typography link onClick={() => startGame(0)}>easy</Typography>\n//         <Typography link onClick={() => startGame(1)}>medium</Typography>\n//         <Typography link onClick={() => startGame(2)}>hard</Typography>\n//         </>\n//       )}\n//       {(!game_status && !difficultyChoice) && (\n//         <Typography link onClick={() => showDifficultyChoice(true)}>start a new challenge</Typography>\n//       )}\n\n//       {game_status && (\n//         <>\n//           <Typography link href=\"/\">get a hint</Typography>\n//           <Typography link href=\"/\">skip</Typography>\n//           <Typography link onClick={stop}>quit</Typography>\n//         </>\n//       )}\n//     </Table>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}