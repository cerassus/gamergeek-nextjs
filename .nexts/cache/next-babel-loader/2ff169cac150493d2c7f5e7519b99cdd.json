{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const getGameDetails = async game => {\n  console.log(game);\n\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game}`);\n    const game_details = await apishot.json();\n    return getGameScreenshots(game_details);\n  } catch (error) {\n    console.log(' getGameDetails');\n    console.log(error);\n    return {};\n  }\n};\n\nconst getGameScreenshots = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`);\n    const screenshots = await apishot.json();\n    const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image);\n    const game_with_screenshots = {\n      id: game.id,\n      name: game.name,\n      altname: game.alternative_names,\n      screenshots: [...game_screenshots],\n      hints: [{\n        developer: game.developers[0].name\n      }, {\n        released: game.released\n      }, {\n        genre: game.genres[game.genres.length - 1].name\n      }]\n    };\n    return getSimilarGames(game_with_screenshots);\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};\n\nconst pick3randomsFromArray = array => {\n  const source = [...array];\n  const resultArray = [];\n\n  for (let i = 0; i < 3; i++) {\n    const randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nconst getSimilarGames = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`);\n    const suggested = await apishot.json();\n    const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name].sort();\n    return _objectSpread(_objectSpread({}, game), {}, {\n      answers: [...answers]\n    });\n  } catch (error) {\n    console.log(error);\n    return [\"Error\", \"Error\", \"Error\"];\n  }\n};","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/global/fetchGameDetails.js"],"names":["getGameDetails","game","console","log","apishot","fetch","game_details","json","getGameScreenshots","error","id","screenshots","game_screenshots","pick3randomsFromArray","results","map","screen","image","game_with_screenshots","name","altname","alternative_names","hints","developer","developers","released","genre","genres","length","getSimilarGames","array","source","resultArray","i","randomIndex","Math","floor","random","push","splice","suggested","answers","sort"],"mappings":"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","sourcesContent":["export const getGameDetails = async (game) => {\n    console.log(game)\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(' getGameDetails')\n        console.log(error)\n        return {}\n    }\n}\n  \nconst getGameScreenshots = async (game) => {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image)\n            const game_with_screenshots = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: [\n                    {developer: game.developers[0].name},\n                    {released: game.released},\n                    {genre: game.genres[game.genres.length-1].name},\n                ],\n            }\n            return getSimilarGames(game_with_screenshots)\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n}\n\nconst pick3randomsFromArray = (array) => {\n    const source = [...array]\n    const resultArray = []\n    for (let i=0; i<3; i++) {\n        const randomIndex = Math.floor(Math.random() * source.length)\n        resultArray.push(source.splice(randomIndex, 1)[0])\n    }\n    return resultArray\n}\n\nconst getSimilarGames = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`)\n        const suggested = await apishot.json()\n        const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name].sort()\n        return {\n            ...game,\n            answers: [ ...answers]\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return [\"Error\", \"Error\", \"Error\"]\n    }\n}"]},"metadata":{},"sourceType":"module"}