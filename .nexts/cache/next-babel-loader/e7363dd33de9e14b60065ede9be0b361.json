{"ast":null,"code":"import { getGameDetails } from \"../global/fetchGameDetails\";\nimport store from \"./store\";\nexport const START_GAME = \"START_GAME\";\nexport const RESUME_GAME = \"RESUME_GAME\";\nexport const END_GAME = \"END_GAME\";\nexport const SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nexport const NEW_ANSWER = \"NEW_ANSWER\";\nexport const CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nexport const START_LOADING = \"START_LOADING\";\nexport const SHOW_HINT = \"SHOW_HINT\";\nexport const NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const SHOW_POPUP = \"SHOW_POPUP\";\nexport const SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\nexport const TEST = \"TEST\";\nexport const startGame = () => ({\n  type: START_GAME\n});\nexport const resumeGame = () => ({\n  type: RESUME_GAME\n});\nexport const endGame = () => ({\n  type: END_GAME\n});\nexport const showRandomGame = game => ({\n  type: SHOW_RANDOM_GAME,\n  game\n});\nexport const pushNewAnswer = answer => ({\n  type: NEW_ANSWER,\n  answer\n});\nexport const startLoading = () => ({\n  type: START_LOADING\n});\nexport const showHint = hint => ({\n  type: SHOW_HINT,\n  hint\n});\nexport const clearUserScore = () => ({\n  type: CLEAR_USER_SCORE\n});\nexport const newGameDatabase = database => ({\n  type: NEW_GAME_DATABASE,\n  database\n});\nexport const removeItemFromDatabase = index => ({\n  type: REMOVE_ITEM,\n  index\n});\nexport const showPopup = popup => ({\n  type: SHOW_POPUP,\n  popup\n});\nexport const setHintCounter = () => ({\n  type: SET_HINT_COUNTER\n});\nexport const test = payload => ({\n  type: TEST,\n  payload\n});\nexport function loadNewQuestion(difficulty) {\n  return async function (dispatch) {\n    const game_database = store.getState().game_database;\n    const randomIndex = Math.floor(Math.random() * game_database.length);\n\n    if (game_database.length === 0) {\n      difficulty ? fetchNewGameDatabase(difficulty - 1) : dispatch(endGame());\n    } else {\n      dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])));\n      dispatch(removeItemFromDatabase(randomIndex));\n    }\n\n    async function fetchNewGameDatabase(difficulty) {\n      const database_array = [];\n      let page = 0;\n\n      switch (difficulty) {\n        case 0:\n          {\n            page = 1;\n            break;\n          }\n\n        case 1:\n          {\n            page = 4;\n            break;\n          }\n\n        case 2:\n          {\n            page = 7;\n            break;\n          }\n\n        default:\n          return [];\n      }\n\n      for (let i = 0; i < 3; i++) {\n        try {\n          const apishot = await fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n          const data = await apishot.json();\n          database_array.push(data.results.map(game => game = game.id));\n        } catch (error) {\n          console.log(error);\n          return [];\n        }\n      }\n\n      await dispatch(newGameDatabase(database_array.flat()));\n      return dispatch(loadNewQuestion());\n    }\n  };\n} // export function loadNewQuestion() {\n//     return async function(dispatch) {\n//         const game_database = store.getState().game_database\n//         const randomIndex = Math.floor(Math.random() * game_database.length)\n//         if(game_database === 0) {\n//           dispatch(endGame()) \n//         } else {\n//             dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])))\n//             dispatch(removeItemFromDatabase(randomIndex))\n//         }\n//     }\n// }\n// export function fetchNewGameDatabase(difficulty) {\n//     return async function(dispatch) {\n//         const database_array = []\n//         let page = 0\n//         switch(difficulty) {\n//             case 0: {page = 1; break;}\n//             case 1: {page = 4; break;}\n//             case 2: {page = 7; break;}\n//             default: return []\n//         }\n//         for(let i=0; i<3; i++) {\n//             try {\n//                 const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n//                 const data = await apishot.json()\n//                 database_array.push(data.results.map(game => game = game.id))\n//             }\n//             catch(error) {\n//                 console.log(error)\n//                 return []\n//             }\n//         }\n//         console.log('rgfg2')\n//          await dispatch(newGameDatabase(database_array.flat()))\n//         return dispatch(loadNewQuestion())\n//     }\n// }\n///////////// COMBINE LOAD QUESTION AND FETCHNEWGAME DB","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/redux/actions.js"],"names":["getGameDetails","store","START_GAME","RESUME_GAME","END_GAME","SHOW_RANDOM_GAME","NEW_ANSWER","CLEAR_USER_SCORE","START_LOADING","SHOW_HINT","NEW_GAME_DATABASE","REMOVE_ITEM","SHOW_POPUP","SET_HINT_COUNTER","TEST","startGame","type","resumeGame","endGame","showRandomGame","game","pushNewAnswer","answer","startLoading","showHint","hint","clearUserScore","newGameDatabase","database","removeItemFromDatabase","index","showPopup","popup","setHintCounter","test","payload","loadNewQuestion","difficulty","dispatch","game_database","getState","randomIndex","Math","floor","random","length","fetchNewGameDatabase","database_array","page","i","apishot","fetch","data","json","push","results","map","id","error","console","log","flat"],"mappings":"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","sourcesContent":["import { getGameDetails } from \"../global/fetchGameDetails\"\nimport store  from \"./store\"\n\nexport const START_GAME = \"START_GAME\";\nexport const RESUME_GAME = \"RESUME_GAME\";\nexport const END_GAME = \"END_GAME\";\nexport const SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nexport const NEW_ANSWER = \"NEW_ANSWER\";\nexport const CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nexport const START_LOADING = \"START_LOADING\";\nexport const SHOW_HINT = \"SHOW_HINT\";\nexport const NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const SHOW_POPUP = \"SHOW_POPUP\";\nexport const SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\n\nexport const TEST = \"TEST\";\n\nexport const startGame = () => ({\n    type: START_GAME,\n})\n\nexport const resumeGame = () => ({\n    type: RESUME_GAME,\n})\n\nexport const endGame = () => ({\n    type: END_GAME,\n})\n\nexport const showRandomGame = (game) => ({\n    type: SHOW_RANDOM_GAME,\n    game,\n})\n\nexport const pushNewAnswer = (answer) => ({\n    type: NEW_ANSWER,\n    answer,\n})\n\nexport const startLoading = () => ({\n    type: START_LOADING,\n})\n\nexport const showHint = (hint) => ({\n    type: SHOW_HINT,\n    hint,\n})\n\nexport const clearUserScore = () => ({\n    type: CLEAR_USER_SCORE,\n})\n\nexport const newGameDatabase = (database) => ({\n    type: NEW_GAME_DATABASE,\n    database,\n})\n\nexport const removeItemFromDatabase = (index) => ({\n    type: REMOVE_ITEM,\n    index,\n})\n\nexport const showPopup = (popup) => ({\n    type: SHOW_POPUP,\n    popup,\n})\n\nexport const setHintCounter = () => ({\n    type: SET_HINT_COUNTER,\n})\n\nexport const test = (payload) => ({\n    type: TEST,\n    payload,\n})\n\nexport function loadNewQuestion(difficulty) {\n    return async function(dispatch) {\n        const game_database = store.getState().game_database\n        const randomIndex = Math.floor(Math.random() * game_database.length)\n        if(game_database.length === 0) {\n            difficulty\n                ? fetchNewGameDatabase(difficulty-1)\n                : dispatch(endGame()) \n        } else {\n          dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])))\n          dispatch(removeItemFromDatabase(randomIndex))\n        }\n        async function fetchNewGameDatabase(difficulty) {\n                const database_array = []\n                let page = 0\n                switch(difficulty) {\n                    case 0: {page = 1; break;}\n                    case 1: {page = 4; break;}\n                    case 2: {page = 7; break;}\n                    default: return []\n                }\n                for(let i=0; i<3; i++) {\n                    try {\n                        const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n                        const data = await apishot.json()\n                        database_array.push(data.results.map(game => game = game.id))\n                    }\n                    catch(error) {\n                        console.log(error)\n                        return []\n                    }\n                }\n                await dispatch(newGameDatabase(database_array.flat()))\n                return dispatch(loadNewQuestion())\n            }\n    }\n}\n\n\n\n\n\n\n\n// export function loadNewQuestion() {\n//     return async function(dispatch) {\n//         const game_database = store.getState().game_database\n//         const randomIndex = Math.floor(Math.random() * game_database.length)\n//         if(game_database === 0) {\n//           dispatch(endGame()) \n//         } else {\n//             dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])))\n//             dispatch(removeItemFromDatabase(randomIndex))\n//         }\n//     }\n// }\n\n// export function fetchNewGameDatabase(difficulty) {\n//     return async function(dispatch) {\n//         const database_array = []\n//         let page = 0\n//         switch(difficulty) {\n//             case 0: {page = 1; break;}\n//             case 1: {page = 4; break;}\n//             case 2: {page = 7; break;}\n//             default: return []\n//         }\n//         for(let i=0; i<3; i++) {\n//             try {\n//                 const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n//                 const data = await apishot.json()\n//                 database_array.push(data.results.map(game => game = game.id))\n//             }\n//             catch(error) {\n//                 console.log(error)\n//                 return []\n//             }\n//         }\n//         console.log('rgfg2')\n//          await dispatch(newGameDatabase(database_array.flat()))\n//         return dispatch(loadNewQuestion())\n//     }\n// }\n\n\n///////////// COMBINE LOAD QUESTION AND FETCHNEWGAME DB\n\n"]},"metadata":{},"sourceType":"module"}