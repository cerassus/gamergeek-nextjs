{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from \"redux\";\nimport * as actions from \"./actions\";\nvar game_status_initial = {\n  isRunning: false,\n  isLoading: false\n};\n\nvar random_game = function random_game() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return action.type === actions.SHOW_RANDOM_GAME ? action.game : state;\n};\n\nvar game_status = function game_status() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : game_status_initial;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.START_GAME:\n      return {\n        isRunning: true,\n        isLoading: false\n      };\n\n    case actions.LOAD_NEW_GAME:\n      return {\n        isRunning: true,\n        isLoading: true\n      };\n\n    case actions.END_GAME:\n      return game_status_initial;\n\n    default:\n      return state;\n  }\n}; // const user_score = (state = [], action) => action.type === actions.NEW_ANSWER ? [...state, action.answer] : state\n\n\nvar user_score = function user_score() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === actions.NEW_ANSWER) {\n    console.log([].concat(_toConsumableArray(state), [action.answer]));\n    return [].concat(_toConsumableArray(state), [action.answer]);\n  } else {\n    return state;\n  }\n};\n\nexport default combineReducers({\n  game_status: game_status,\n  random_game: random_game,\n  user_score: user_score\n}); // const game_database = [...source.results].map((game,i) => game = {\n//     id: game.id,\n//     title: game.name,\n//     screenshots: [\n//         ...game.short_screenshots.slice(0, 3).map(screenshot => screenshot.image)\n//     ],\n//     hints: {\n//         genre: game.genres[game.genres.length-1].name,\n//         year: game.released,\n//     }\n// })","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/redux/reducers.js"],"names":["combineReducers","actions","game_status_initial","isRunning","isLoading","random_game","state","action","type","SHOW_RANDOM_GAME","game","game_status","START_GAME","LOAD_NEW_GAME","END_GAME","user_score","NEW_ANSWER","console","log","answer"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAGA,IAAMC,mBAAmB,GAAG;AACxBC,EAAAA,SAAS,EAAE,KADa;AAExBC,EAAAA,SAAS,EAAE;AAFa,CAA5B;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,MAAaC,MAAb;AAAA,SAAwBA,MAAM,CAACC,IAAP,KAAgBP,OAAO,CAACQ,gBAAxB,GAA2CF,MAAM,CAACG,IAAlD,GAAyDJ,KAAjF;AAAA,CAApB;;AAEA,IAAMK,WAAW,GAAG,SAAdA,WAAc,GAAyC;AAAA,MAAxCL,KAAwC,uEAAhCJ,mBAAgC;AAAA,MAAXK,MAAW;;AACzD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,OAAO,CAACW,UAAb;AAAyB,aAAO;AACxBT,QAAAA,SAAS,EAAE,IADa;AAExBC,QAAAA,SAAS,EAAE;AAFa,OAAP;;AAIzB,SAAKH,OAAO,CAACY,aAAb;AAA4B,aAAO;AAC3BV,QAAAA,SAAS,EAAE,IADgB;AAE3BC,QAAAA,SAAS,EAAE;AAFgB,OAAP;;AAI5B,SAAKH,OAAO,CAACa,QAAb;AAAuB,aAAOZ,mBAAP;;AACvB;AAAS,aAAOI,KAAP;AAVb;AAYH,CAbD,C,CAeA;;;AAEA,IAAMS,UAAU,GAAG,SAAbA,UAAa,GAAwB;AAAA,MAAvBT,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACvC,MAAGA,MAAM,CAACC,IAAP,KAAgBP,OAAO,CAACe,UAA3B,EAAuC;AACnCC,IAAAA,OAAO,CAACC,GAAR,8BAAgBZ,KAAhB,IAAuBC,MAAM,CAACY,MAA9B;AACA,wCAAWb,KAAX,IAAkBC,MAAM,CAACY,MAAzB;AACH,GAHD,MAGO;AACH,WAAOb,KAAP;AACH;AACJ,CAPD;;AASA,eAAeN,eAAe,CAAC;AAC7BW,EAAAA,WAAW,EAAXA,WAD6B;AAE7BN,EAAAA,WAAW,EAAXA,WAF6B;AAG7BU,EAAAA,UAAU,EAAVA;AAH6B,CAAD,CAA9B,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from \"redux\"\nimport * as actions from \"./actions\"\n\n\nconst game_status_initial = {\n    isRunning: false,\n    isLoading: false,\n}\n\nconst random_game = (state = \"\", action) => action.type === actions.SHOW_RANDOM_GAME ? action.game : state\n\nconst game_status = (state = game_status_initial, action) => {\n    switch(action.type) {\n        case actions.START_GAME: return { \n                isRunning: true,\n                isLoading: false,\n            }\n        case actions.LOAD_NEW_GAME: return { \n                isRunning: true,\n                isLoading: true,\n            }\n        case actions.END_GAME: return game_status_initial\n        default: return state\n    }\n}\n\n// const user_score = (state = [], action) => action.type === actions.NEW_ANSWER ? [...state, action.answer] : state\n\nconst user_score = (state = [], action) => {\n    if(action.type === actions.NEW_ANSWER) {\n        console.log([...state, action.answer])\n        return [...state, action.answer]\n    } else {\n        return state\n    }\n}\n\nexport default combineReducers({\n  game_status,\n  random_game,\n  user_score,\n})\n\n\n\n\n\n\n\n\n\n// const game_database = [...source.results].map((game,i) => game = {\n//     id: game.id,\n//     title: game.name,\n//     screenshots: [\n//         ...game.short_screenshots.slice(0, 3).map(screenshot => screenshot.image)\n//     ],\n//     hints: {\n//         genre: game.genres[game.genres.length-1].name,\n//         year: game.released,\n//     }\n// })"]},"metadata":{},"sourceType":"module"}