{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getRandomGame } from \"../redux/actions\";\nexport var pickRandomGame = function pickRandomGame(database) {\n  var randomIndex = Math.floor(Math.random() * database.length);\n  var game = database[randomIndex];\n  database.splice(randomIndex, 1);\n  console.log(database);\n  return getGameDetails(game);\n};\nexport var getGameDetails = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(game) {\n    var apishot, game_details;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id));\n\n          case 3:\n            apishot = _context.sent;\n            _context.next = 6;\n            return apishot.json();\n\n          case 6:\n            game_details = _context.sent;\n            console.log(game_details);\n            return _context.abrupt(\"return\", getGameScreenshots(game_details));\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {});\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function getGameDetails(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction getGameScreenshots(game) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var apishot, screenshots, game_screenshots, gamess;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(game);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/screenshots\"));\n\n            case 4:\n              apishot = _context2.sent;\n              _context2.next = 7;\n              return apishot.json();\n\n            case 7:\n              screenshots = _context2.sent;\n              game_screenshots = screenshots.results.splice(0, 3);\n              gamess = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: _toConsumableArray(game_screenshots),\n                hints: {\n                  developer: game.developers[0].name,\n                  released: game.released,\n                  genre: game.genres[game.genres.length - 1].name\n                }\n              };\n              console.log(gamess);\n              dispatch(getRandomGame(gamess));\n              return _context2.abrupt(\"return\", gamess);\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n              return _context2.abrupt(\"return\", {});\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 15]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/global/fetch.js"],"names":["getRandomGame","pickRandomGame","database","randomIndex","Math","floor","random","length","game","splice","console","log","getGameDetails","fetch","id","apishot","json","game_details","getGameScreenshots","dispatch","screenshots","game_screenshots","results","gamess","name","altname","alternative_names","hints","developer","developers","released","genre","genres"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAc;AACxC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,QAAQ,CAACK,MAApC,CAApB;AACA,MAAMC,IAAI,GAAGN,QAAQ,CAACC,WAAD,CAArB;AACAD,EAAAA,QAAQ,CAACO,MAAT,CAAgBN,WAAhB,EAA6B,CAA7B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,SAAOU,cAAc,CAACJ,IAAD,CAArB;AACH,CANM;AAQP,OAAO,IAAMI,cAAc;AAAA,sEAAG,iBAAOJ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAK,KAAK,yCAAkCL,IAAI,CAACM,EAAvC,EAFL;;AAAA;AAEhBC,YAAAA,OAFgB;AAAA;AAAA,mBAGKA,OAAO,CAACC,IAAR,EAHL;;AAAA;AAGhBC,YAAAA,YAHgB;AAItBP,YAAAA,OAAO,CAACC,GAAR,CAAYM,YAAZ;AAJsB,6CAKfC,kBAAkB,CAACD,YAAD,CALH;;AAAA;AAAA;AAAA;AAQtBP,YAAAA,OAAO,CAACC,GAAR;AARsB,6CASf,EATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdC,cAAc;AAAA;AAAA;AAAA,GAApB;;AAaP,SAASM,kBAAT,CAA4BV,IAA5B,EAAkC;AAC9B;AAAA,yEAAO,kBAAeW,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACHT,cAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AADG;AAAA;AAAA,qBAGuBK,KAAK,yCAAkCL,IAAI,CAACM,EAAvC,kBAH5B;;AAAA;AAGOC,cAAAA,OAHP;AAAA;AAAA,qBAI2BA,OAAO,CAACC,IAAR,EAJ3B;;AAAA;AAIOI,cAAAA,WAJP;AAKOC,cAAAA,gBALP,GAK0BD,WAAW,CAACE,OAAZ,CAAoBb,MAApB,CAA2B,CAA3B,EAA6B,CAA7B,CAL1B;AAMOc,cAAAA,MANP,GAMgB;AACXT,gBAAAA,EAAE,EAAEN,IAAI,CAACM,EADE;AAEXU,gBAAAA,IAAI,EAAEhB,IAAI,CAACgB,IAFA;AAGXC,gBAAAA,OAAO,EAAEjB,IAAI,CAACkB,iBAHH;AAIXN,gBAAAA,WAAW,qBAAMC,gBAAN,CAJA;AAKXM,gBAAAA,KAAK,EAAE;AACHC,kBAAAA,SAAS,EAAEpB,IAAI,CAACqB,UAAL,CAAgB,CAAhB,EAAmBL,IAD3B;AAEHM,kBAAAA,QAAQ,EAAEtB,IAAI,CAACsB,QAFZ;AAGHC,kBAAAA,KAAK,EAAEvB,IAAI,CAACwB,MAAL,CAAYxB,IAAI,CAACwB,MAAL,CAAYzB,MAAZ,GAAmB,CAA/B,EAAkCiB;AAHtC;AALI,eANhB;AAiBCd,cAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ;AACAJ,cAAAA,QAAQ,CAACnB,aAAa,CAACuB,MAAD,CAAd,CAAR;AAlBD,gDAmBQA,MAnBR;;AAAA;AAAA;AAAA;AAsBCb,cAAAA,OAAO,CAACC,GAAR;AAtBD,gDAuBQ,EAvBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA0BH","sourcesContent":["import { getRandomGame } from \"../redux/actions\"\n\nexport const pickRandomGame = (database) => {\n    const randomIndex = Math.floor(Math.random() * database.length)\n    const game = database[randomIndex]\n    database.splice(randomIndex, 1)\n    console.log(database)\n    return getGameDetails(game)\n}\n\nexport const getGameDetails = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`)\n        const game_details = await apishot.json()\n        console.log(game_details)\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}\n  \nfunction getGameScreenshots(game) {\n    return async function(dispatch) {\n        console.log(game)\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            const game_screenshots = screenshots.results.splice(0,3)\n            const gamess = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: {\n                    developer: game.developers[0].name,\n                    released: game.released,\n                    genre: game.genres[game.genres.length-1].name,\n                }\n            }\n            console.log(gamess)\n            dispatch(getRandomGame(gamess))\n            return gamess\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}