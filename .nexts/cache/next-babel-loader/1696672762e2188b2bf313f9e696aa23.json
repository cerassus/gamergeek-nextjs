{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/styled-components/MainCounter.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  text-transform: uppercase;\\n  font-weight: 900;\\n  font-size: 3rem;\\n  display: inline-block;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from \"styled-components\";\nimport React from \"react\";\nimport { countdown } from \"../../redux/actions\";\nimport moment from \"moment\";\nvar CounterContainer = styled.div(_templateObject());\n_c = CounterContainer;\nexport default function MainCounter(_ref) {\n  _s();\n\n  var game_status = _ref.game_status,\n      main_counter = _ref.main_counter;\n\n  var _React$useState = React.useState(60),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      gameTime = _React$useState2[0],\n      setGameTime = _React$useState2[1];\n\n  var runCounting = setInterval(function () {\n    setGameTime(gameTime - 1);\n  }, 1000);\n  var stopCounting = clearInterval(runCounting);\n  return /*#__PURE__*/_jsxDEV(CounterContainer, {\n    onClick: function onClick() {\n      return runCounting();\n    },\n    children: gameTime > 45 ? gameTime : \"poni\\u017Cej 45 sec\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n} // React.useEffect(() => {\n//   game_status.isStarted ? \n//   startTimer()\n//   : console.log('game over')\n// }, [game_status.isStarted])\n// React.useEffect(() => {\n//   game_status.isRunning ? console.log('running') : game_status.isLoading && console.log('loading') \n// }, [game_status.isRunning])\n\n_s(MainCounter, \"9dDR1NjYxlIxsbwNbgC+GBzUono=\");\n\n_c2 = MainCounter;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CounterContainer\");\n$RefreshReg$(_c2, \"MainCounter\");","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/styled-components/MainCounter.js"],"names":["styled","React","countdown","moment","CounterContainer","div","MainCounter","game_status","main_counter","useState","gameTime","setGameTime","runCounting","setInterval","stopCounting","clearInterval"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAMC,gBAAgB,GAAGJ,MAAM,CAACK,GAAV,mBAAtB;KAAMD,gB;AAON,eAAe,SAASE,WAAT,OAAkD;AAAA;;AAAA,MAA5BC,WAA4B,QAA5BA,WAA4B;AAAA,MAAfC,YAAe,QAAfA,YAAe;;AAAA,wBAC/BP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAD+B;AAAA;AAAA,MACxDC,QADwD;AAAA,MAC9CC,WAD8C;;AAE/D,MAAMC,WAAW,GAAGC,WAAW,CAAC,YAAM;AAChCF,IAAAA,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAX;AACH,GAF4B,EAE1B,IAF0B,CAA/B;AAGA,MAAMI,YAAY,GAAGC,aAAa,CAACH,WAAD,CAAlC;AACA,sBACE,QAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE;AAAA,aAAMA,WAAW,EAAjB;AAAA,KAA3B;AAAA,cACGF,QAAQ,GAAG,EAAX,GAAgBA,QAAhB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GArBwBJ,W;;MAAAA,W","sourcesContent":["import styled from \"styled-components\";\nimport React from \"react\"\nimport {countdown} from \"../../redux/actions\"\nimport moment from \"moment\"\n\nconst CounterContainer = styled.div`\n  text-transform: uppercase;\n  font-weight: 900;\n  font-size: 3rem;\n  display: inline-block;\n`;\n\nexport default function MainCounter({game_status, main_counter}) {\n  const [gameTime, setGameTime] = React.useState(60)\n  const runCounting = setInterval(() => {\n        setGameTime(gameTime - 1)\n    }, 1000);\n  const stopCounting = clearInterval(runCounting)\n  return (\n    <CounterContainer onClick={() => runCounting()}>\n      {gameTime > 45 ? gameTime : `poni≈ºej 45 sec`}\n    </CounterContainer>\n  )\n}\n\n\n// React.useEffect(() => {\n//   game_status.isStarted ? \n//   startTimer()\n//   : console.log('game over')\n// }, [game_status.isStarted])\n// React.useEffect(() => {\n//   game_status.isRunning ? console.log('running') : game_status.isLoading && console.log('loading') \n// }, [game_status.isRunning])"]},"metadata":{},"sourceType":"module"}