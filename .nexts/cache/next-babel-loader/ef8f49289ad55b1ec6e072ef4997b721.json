{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/Table.js\",\n    _s = $RefreshSig$();\n\nimport Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport React from \"react\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\nvar game_difficulty = [\"easy\", \"medium\", \"hard\"];\nexport default function TableTop(_ref) {\n  _s();\n\n  var _this = this;\n\n  var game_status = _ref.game_status,\n      random_game = _ref.random_game,\n      screenshots_loaded = _ref.screenshots_loaded,\n      startGame = _ref.startGame,\n      stopGame = _ref.stopGame,\n      getRandomGame = _ref.getRandomGame,\n      newAnswer = _ref.newAnswer,\n      screenshotsAreLoading = _ref.screenshotsAreLoading;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      difficultyChoice = _React$useState2[0],\n      showDifficultyChoice = _React$useState2[1];\n\n  var stop = function stop() {\n    showDifficultyChoice(false);\n    return stopGame();\n  };\n\n  var start = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(difficulty) {\n      var randomik;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              screenshotsAreLoading();\n              _context.next = 3;\n              return pickRandomGame(game_database);\n\n            case 3:\n              randomik = _context.sent;\n              getRandomGame(randomik);\n              difficulty && startGame(difficulty);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function start(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var checkAnswer = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(answer) {\n      var user_answer;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              user_answer = answer.target.innerText === random_game.name ? {\n                title: random_game.name,\n                time: 3,\n                score: 2000,\n                correct: true\n              } : {\n                title: random_game.name,\n                time: 3,\n                score: 0,\n                correct: false\n              };\n              newAnswer(user_answer);\n              start();\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function checkAnswer(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      top: true,\n      children: screenshots_loaded !== \"loading\" ? game_status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          href: \"/\",\n          children: \"get a hint\"\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: start,\n          children: \"skip\"\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: stop,\n          children: \"quit\"\n        }, Math.random() * 10000, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : difficultyChoice ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          children: [\"set difficulty:\", \" \"]\n        }, Math.random() * 10000, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), game_difficulty.map(function (diff, i) {\n          return /*#__PURE__*/_jsxDEV(Typography, {\n            link: true,\n            onClick: function onClick() {\n              return start({\n                i: i\n              });\n            },\n            children: diff\n          }, Math.random() * 10000, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, _this);\n        })]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Typography, {\n        link: true,\n        onClick: function onClick() {\n          return showDifficultyChoice(true);\n        },\n        children: \"start a new challenge\"\n      }, 123432, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        link: true,\n        children: \"loading\"\n      }, Math.random() * 10000, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      bottom: true,\n      children: game_status && random_game.answers && screenshots_loaded === \"loaded\" ? random_game.answers.map(function (answer, i) {\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          answer: true,\n          onClick: function onClick(answer) {\n            return checkAnswer(answer);\n          },\n          children: answer\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, _this);\n      }) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export default function TableTop({ game_status, startGame, stopGame }) {\n//   const [difficultyChoice, showDifficultyChoice] = React.useState(false)\n//   const stop = () => {\n//     showDifficultyChoice(false);\n//     return stopGame();\n//   }\n//   return (\n//     <Table top>\n//       {(!game_status && difficultyChoice) && (\n//         <>\n//         <Typography link>set difficulty: </Typography>\n//         <Typography link onClick={() => startGame(0)}>easy</Typography>\n//         <Typography link onClick={() => startGame(1)}>medium</Typography>\n//         <Typography link onClick={() => startGame(2)}>hard</Typography>\n//         </>\n//       )}\n//       {(!game_status && !difficultyChoice) && (\n//         <Typography link onClick={() => showDifficultyChoice(true)}>start a new challenge</Typography>\n//       )}\n//       {game_status && (\n//         <>\n//           <Typography link href=\"/\">get a hint</Typography>\n//           <Typography link href=\"/\">skip</Typography>\n//           <Typography link onClick={stop}>quit</Typography>\n//         </>\n//       )}\n//     </Table>\n//   );\n// }\n\n_s(TableTop, \"v0Nho68mWNkC/ol++Z6UofPgdr8=\");\n\n_c = TableTop;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableTop\");","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/Table.js"],"names":["Table","Typography","React","pickRandomGame","game_database","game_difficulty","TableTop","game_status","random_game","screenshots_loaded","startGame","stopGame","getRandomGame","newAnswer","screenshotsAreLoading","useState","difficultyChoice","showDifficultyChoice","stop","start","difficulty","randomik","checkAnswer","answer","user_answer","target","innerText","name","title","time","score","correct","Math","random","map","diff","i","answers"],"mappings":"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","sourcesContent":["import Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport React from \"react\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\n\nconst game_difficulty = [\"easy\", \"medium\", \"hard\"];\n\nexport default function TableTop({\n  game_status,\n  random_game,\n  screenshots_loaded,\n  startGame,\n  stopGame,\n  getRandomGame,\n  newAnswer,\n  screenshotsAreLoading,\n}) {\n  const [difficultyChoice, showDifficultyChoice] = React.useState(false);\n  const stop = () => {\n    showDifficultyChoice(false);\n    return stopGame();\n  };\n  const start = async (difficulty) => {\n    screenshotsAreLoading();\n    const randomik = await pickRandomGame(game_database);\n    getRandomGame(randomik);\n    difficulty && startGame(difficulty);\n  };\n  const checkAnswer = async (answer) => {\n    const user_answer =\n      answer.target.innerText === random_game.name\n        ? {\n            title: random_game.name,\n            time: 3,\n            score: 2000,\n            correct: true,\n          }\n        : {\n            title: random_game.name,\n            time: 3,\n            score: 0,\n            correct: false,\n          };\n    newAnswer(user_answer);\n    start();\n  };\n  return (\n    <>\n      <Table top>\n        {screenshots_loaded !== \"loading\" ?\n          (game_status ? (\n            <>\n              <Typography key={Math.random() * 10000} link href=\"/\">\n                get a hint\n              </Typography>\n              <Typography key={Math.random() * 10000} link onClick={start}>\n                skip\n              </Typography>\n              <Typography key={Math.random() * 10000} link onClick={stop}>\n                quit\n              </Typography>\n            </>\n          ) : difficultyChoice ? (\n            <>\n              <Typography key={Math.random() * 10000} link>\n                set difficulty:{\" \"}\n              </Typography>\n              {game_difficulty.map((diff, i) => (\n                <Typography\n                  key={Math.random() * 10000}\n                  link\n                  onClick={() => start({ i })}\n                >\n                  {diff}\n                </Typography>\n              ))}\n            </>\n          ) : (\n            <Typography\n              key={123432}\n              link\n              onClick={() => showDifficultyChoice(true)}\n            >\n              start a new challenge\n            </Typography>\n          )) : \n          <Typography\n          key={Math.random() * 10000}\n          link\n        >\n          loading\n        </Typography>}\n      </Table>\n      <Table bottom>\n        {game_status && random_game.answers && screenshots_loaded === \"loaded\"\n          ? random_game.answers.map((answer, i) => (\n              <Typography\n                key={i}\n                answer\n                onClick={(answer) => checkAnswer(answer)}\n              >\n                {answer}\n              </Typography>\n            ))\n          : ``}\n      </Table>\n    </>\n  );\n}\n\n// export default function TableTop({ game_status, startGame, stopGame }) {\n//   const [difficultyChoice, showDifficultyChoice] = React.useState(false)\n//   const stop = () => {\n//     showDifficultyChoice(false);\n//     return stopGame();\n//   }\n//   return (\n//     <Table top>\n//       {(!game_status && difficultyChoice) && (\n//         <>\n//         <Typography link>set difficulty: </Typography>\n//         <Typography link onClick={() => startGame(0)}>easy</Typography>\n//         <Typography link onClick={() => startGame(1)}>medium</Typography>\n//         <Typography link onClick={() => startGame(2)}>hard</Typography>\n//         </>\n//       )}\n//       {(!game_status && !difficultyChoice) && (\n//         <Typography link onClick={() => showDifficultyChoice(true)}>start a new challenge</Typography>\n//       )}\n\n//       {game_status && (\n//         <>\n//           <Typography link href=\"/\">get a hint</Typography>\n//           <Typography link href=\"/\">skip</Typography>\n//           <Typography link onClick={stop}>quit</Typography>\n//         </>\n//       )}\n//     </Table>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}