{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport * as actions from \"./actions\";\n\nconst game_database = (state = [], action) => {\n  switch (action.type) {\n    case actions.NEW_GAME_DATABASE:\n      return action.database;\n\n    case actions.REMOVE_ITEM:\n      return [...state.filter((x, i) => i !== action.index && x)];\n\n    case actions.END_GAME:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst random_game = (state = \"\", action) => {\n  switch (action.type) {\n    case actions.SHOW_RANDOM_GAME:\n      return action.game;\n\n    case actions.START_LOADING:\n      return \"\";\n\n    case actions.END_GAME:\n      return \"\";\n\n    default:\n      return state;\n  }\n};\n\nconst user_score = (state = [], action) => {\n  switch (action.type) {\n    case actions.NEW_ANSWER:\n      {\n        console.log([...state, action.answer]);\n        return [...state, action.answer];\n      }\n\n    case actions.CLEAR_USER_SCORE:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst hints_array = (state = [], action) => {\n  switch (action.type) {\n    case actions.SHOW_HINT:\n      {\n        console.log([...state, action.hint]);\n        return [...state, action.hint];\n      }\n\n    case actions.CLEAR_HINT:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst game_status = (state = {\n  isStarted: false,\n  isLoading: false\n}, action) => {\n  switch (action.type) {\n    case actions.START_GAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isStarted: true\n      });\n\n    case actions.START_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: true\n      });\n\n    case actions.RESUME_GAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false\n      });\n\n    case actions.END_GAME:\n      return {\n        isLoading: false,\n        isStarted: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  random_game,\n  user_score,\n  hints_array,\n  game_status,\n  game_database\n});","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/redux/reducers.js"],"names":["combineReducers","actions","game_database","state","action","type","NEW_GAME_DATABASE","database","REMOVE_ITEM","filter","x","i","index","END_GAME","random_game","SHOW_RANDOM_GAME","game","START_LOADING","user_score","NEW_ANSWER","console","log","answer","CLEAR_USER_SCORE","hints_array","SHOW_HINT","hint","CLEAR_HINT","game_status","isStarted","isLoading","START_GAME","RESUME_GAME"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\"\nimport * as actions from \"./actions\"\n\n\nconst game_database = (state = [], action) => {\n    switch(action.type) {\n        case actions.NEW_GAME_DATABASE: return action.database \n        case actions.REMOVE_ITEM: return ([\n            ...state.filter((x,i) => i !== action.index && x)\n          ])\n        case actions.END_GAME: return []\n        default: return state\n    } \n}\n\nconst random_game = (state = \"\", action) => {\n    switch(action.type) {\n        case actions.SHOW_RANDOM_GAME: return action.game \n        case actions.START_LOADING: return \"\"\n        case actions.END_GAME: return \"\"\n        default: return state\n    }\n}\n    \nconst user_score = (state = [], action) => {\n    switch(action.type) {\n        case actions.NEW_ANSWER: {\n            console.log([...state, action.answer])\n            return [...state, action.answer]\n        } \n        case actions.CLEAR_USER_SCORE: return []\n        default: return state\n    }\n}\n\nconst hints_array = (state = [], action) => {\n    switch(action.type) {\n        case actions.SHOW_HINT: {\n            console.log([...state, action.hint])\n            return [...state, action.hint]\n        }\n        case actions.CLEAR_HINT: return []\n        default: return state\n    }\n}\n\nconst game_status = (state = { isStarted: false, isLoading: false }, action) => {\n    switch(action.type) {\n        case actions.START_GAME: return {\n            ...state,\n            isStarted: true,\n        }\n        case actions.START_LOADING: return {\n            ...state,\n            isLoading: true,\n        }\n        case actions.RESUME_GAME: return {\n            ...state,\n            isLoading: false,\n        }\n        case actions.END_GAME: return {\n            isLoading: false,\n            isStarted: false,\n        }\n        default: return state\n    }\n}\n\n\nexport default combineReducers({\n  random_game,\n  user_score,\n  hints_array,\n  game_status,\n  game_database,\n})"]},"metadata":{},"sourceType":"module"}