{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Table from \"../components/main/challenge/Table\";\nimport { showHint as _showHint, removeItemFromDatabase as _removeItemFromDatabase, newGameDatabase as _newGameDatabase, clearUserScore as _clearUserScore, clearHint as _clearHint, pushNewAnswer as _pushNewAnswer, startGame as _startGame, endGame as _endGame, showRandomGame as _showRandomGame, startLoading as _startLoading } from \"../redux/actions\";\n\nvar mapState = function mapState(state) {\n  return {\n    game_status: state.game_status,\n    random_game: state.random_game,\n    user_score: state.user_score,\n    game_database: state.game_database\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    pushNewAnswer: function pushNewAnswer(answer) {\n      return dispatch(_pushNewAnswer(answer));\n    },\n    showRandomGame: function showRandomGame(game) {\n      return dispatch(_showRandomGame(game));\n    },\n    startGame: function startGame() {\n      return dispatch(_startGame());\n    },\n    endGame: function endGame() {\n      return dispatch(_endGame());\n    },\n    startLoading: function startLoading() {\n      return dispatch(_startLoading());\n    },\n    showHint: function showHint(hint) {\n      return dispatch(_showHint(hint));\n    },\n    clearHint: function clearHint() {\n      return dispatch(_clearHint());\n    },\n    clearUserScore: function clearUserScore() {\n      return dispatch(_clearUserScore());\n    },\n    newGameDatabase: function newGameDatabase(db) {\n      return dispatch(_newGameDatabase(db));\n    },\n    removeItemFromDatabase: function removeItemFromDatabase(index) {\n      return dispatch(_removeItemFromDatabase(index));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Table);","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/containers/Table.js"],"names":["connect","Table","showHint","removeItemFromDatabase","newGameDatabase","clearUserScore","clearHint","pushNewAnswer","startGame","endGame","showRandomGame","startLoading","mapState","state","game_status","random_game","user_score","game_database","mapDispatch","dispatch","answer","game","hint","db","index"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,SAASC,QAAQ,IAARA,SAAT,EAAmBC,sBAAsB,IAAtBA,uBAAnB,EAA2CC,eAAe,IAAfA,gBAA3C,EAA4DC,cAAc,IAAdA,eAA5D,EAA4EC,SAAS,IAATA,UAA5E,EAAuFC,aAAa,IAAbA,cAAvF,EAAsGC,SAAS,IAATA,UAAtG,EAAiHC,OAAO,IAAPA,QAAjH,EAA0HC,cAAc,IAAdA,eAA1H,EAA0IC,YAAY,IAAZA,aAA1I,QAA8J,kBAA9J;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAK;AACzBC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADM;AAEzBC,IAAAA,WAAW,EAAEF,KAAK,CAACE,WAFM;AAGzBC,IAAAA,UAAU,EAAEH,KAAK,CAACG,UAHO;AAIzBC,IAAAA,aAAa,EAAEJ,KAAK,CAACI;AAJI,GAAL;AAAA,CAAtB;;AAOA,IAAMC,WAAW,GAAI,SAAfA,WAAe,CAAAC,QAAQ;AAAA,SAAK;AAChCZ,IAAAA,aAAa,EAAE,uBAACa,MAAD;AAAA,aAAYD,QAAQ,CAACZ,cAAa,CAACa,MAAD,CAAd,CAApB;AAAA,KADiB;AAEhCV,IAAAA,cAAc,EAAE,wBAACW,IAAD;AAAA,aAAUF,QAAQ,CAACT,eAAc,CAACW,IAAD,CAAf,CAAlB;AAAA,KAFgB;AAGhCb,IAAAA,SAAS,EAAE;AAAA,aAAMW,QAAQ,CAACX,UAAS,EAAV,CAAd;AAAA,KAHqB;AAIhCC,IAAAA,OAAO,EAAE;AAAA,aAAMU,QAAQ,CAACV,QAAO,EAAR,CAAd;AAAA,KAJuB;AAKhCE,IAAAA,YAAY,EAAE;AAAA,aAAMQ,QAAQ,CAACR,aAAY,EAAb,CAAd;AAAA,KALkB;AAMhCT,IAAAA,QAAQ,EAAE,kBAACoB,IAAD;AAAA,aAAUH,QAAQ,CAACjB,SAAQ,CAACoB,IAAD,CAAT,CAAlB;AAAA,KANsB;AAOhChB,IAAAA,SAAS,EAAE;AAAA,aAAMa,QAAQ,CAACb,UAAS,EAAV,CAAd;AAAA,KAPqB;AAQhCD,IAAAA,cAAc,EAAE;AAAA,aAAMc,QAAQ,CAACd,eAAc,EAAf,CAAd;AAAA,KARgB;AAShCD,IAAAA,eAAe,EAAE,yBAACmB,EAAD;AAAA,aAAQJ,QAAQ,CAACf,gBAAe,CAACmB,EAAD,CAAhB,CAAhB;AAAA,KATe;AAUhCpB,IAAAA,sBAAsB,EAAE,gCAACqB,KAAD;AAAA,aAAWL,QAAQ,CAAChB,uBAAsB,CAACqB,KAAD,CAAvB,CAAnB;AAAA;AAVQ,GAAL;AAAA,CAA7B;;AAaA,eAAexB,OAAO,CAACY,QAAD,EAAWM,WAAX,CAAP,CAA+BjB,KAA/B,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Table from \"../components/main/challenge/Table\"\nimport { showHint, removeItemFromDatabase, newGameDatabase, clearUserScore, clearHint, pushNewAnswer, startGame, endGame, showRandomGame, startLoading } from \"../redux/actions\"\n\nconst mapState = state => ({\n  game_status: state.game_status,\n  random_game: state.random_game,\n  user_score: state.user_score,\n  game_database: state.game_database,\n})\n\nconst mapDispatch  = dispatch => ({\n  pushNewAnswer: (answer) => dispatch(pushNewAnswer(answer)),\n  showRandomGame: (game) => dispatch(showRandomGame(game)),\n  startGame: () => dispatch(startGame()),\n  endGame: () => dispatch(endGame()),\n  startLoading: () => dispatch(startLoading()),\n  showHint: (hint) => dispatch(showHint(hint)),\n  clearHint: () => dispatch(clearHint()),\n  clearUserScore: () => dispatch(clearUserScore()),\n  newGameDatabase: (db) => dispatch(newGameDatabase(db)),\n  removeItemFromDatabase: (index) => dispatch(removeItemFromDatabase(index)),\n})\n\nexport default connect(mapState, mapDispatch)(Table);\n"]},"metadata":{},"sourceType":"module"}