{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Table from \"../../../styled-components/Table\";\nimport Typography from \"../../../styled-components/Typography\";\nimport { useState, useEffect } from \"react\";\nimport moment from 'moment';\nexport default function GameNavigatorBottom({\n  game_is_started,\n  game_is_loading,\n  hintCounter,\n  random_game,\n  pushNewAnswer,\n  loadNewQuestion,\n  startLoading\n}) {\n  const {\n    0: answerTimeStart,\n    1: setAnswerTimeStart\n  } = useState(false);\n\n  const checkAnswer = (() => {\n    var _ref = _asyncToGenerator(function* (answer) {\n      const answerTimeEnd = moment();\n      const user_answer = answer === random_game.name ? {\n        title: random_game.name,\n        time: answerTimeEnd.diff(answerTimeStart),\n        score: Number((1000 / answerTimeEnd.diff(answerTimeStart) * 10000 * ((10 - hintCounter) / 10)).toFixed()),\n        correct: true,\n        hints_used: hintCounter\n      } : {\n        title: random_game.name,\n        time: answerTimeEnd.diff(answerTimeStart),\n        score: 0,\n        correct: false,\n        hints_used: hintCounter\n      };\n      startLoading();\n      pushNewAnswer(user_answer);\n      loadNewQuestion();\n    });\n\n    return function checkAnswer(_x) {\n      return _ref.apply(this, arguments);\n    };\n  })();\n\n  useEffect(() => {\n    !game_is_loading && setAnswerTimeStart(moment());\n  }, [game_is_loading]);\n  return /*#__PURE__*/_jsx(Table, {\n    bottom: true,\n    children: game_is_started && !game_is_loading && random_game.answers ? random_game.answers.map((answer, i) => /*#__PURE__*/_jsx(Typography, {\n      answer: true,\n      onClick: answer => checkAnswer(answer.target.innerText),\n      children: answer\n    }, \"key0021\" + i)) : ``\n  });\n}","map":null,"metadata":{},"sourceType":"module"}