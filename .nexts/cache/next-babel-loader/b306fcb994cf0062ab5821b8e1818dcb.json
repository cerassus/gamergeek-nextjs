{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/pages/index.js\";\nimport Layout from \"../layout/Layout\";\nimport ScreenshotViewer from \"../containers/ScreenshotViewer\";\nimport Table from \"../containers/Table\";\nimport { connect } from \"react-redux\";\nimport { countdown } from \"../redux/actions\";\nimport { useState, useEffect } from \"react\";\n\nconst mapState = state => ({\n  game_status: state.game_status\n});\n\nconst mapDispatch = dispatch => ({\n  countdown: () => dispatch(countdown())\n});\n\nfunction HomePage({\n  game_status,\n  main_counter,\n  countdown\n}) {\n  //  const [number, setNumber] = useState(60)\n  const counter = () => {\n    countdown();\n  };\n\n  const interv = setInterval(counter, 1000);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"Challenge\",\n    children: [/*#__PURE__*/_jsxDEV(ScreenshotViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\nexport default connect(mapState, mapDispatch)(HomePage); // Dodać counter czasu gry\n// Dodanie POPUPa z podsumowaniem gry, który pojawia się po upływie czasu lub po kliknięciu QUIT\n// HINTS animation\n// React.useEffect(() => {\n//   game_status.isStarted ? \n//   startTimer()\n//   : console.log('game over')\n// }, [game_status.isStarted])\n// React.useEffect(() => {\n//   game_status.isRunning ? console.log('running') : game_status.isLoading && console.log('loading') \n// }, [game_status.isRunning])","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/pages/index.js"],"names":["Layout","ScreenshotViewer","Table","connect","countdown","useState","useEffect","mapState","state","game_status","mapDispatch","dispatch","HomePage","main_counter","counter","interv","setInterval"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,KAAK;AACzBC,EAAAA,WAAW,EAAED,KAAK,CAACC;AADM,CAAL,CAAtB;;AAIA,MAAMC,WAAW,GAAIC,QAAQ,KAAK;AAChCP,EAAAA,SAAS,EAAE,MAAMO,QAAQ,CAACP,SAAS,EAAV;AADO,CAAL,CAA7B;;AAIA,SAASQ,QAAT,CAAkB;AAACH,EAAAA,WAAD;AAAcI,EAAAA,YAAd;AAA4BT,EAAAA;AAA5B,CAAlB,EAA0D;AAC1D;AACE,QAAMU,OAAO,GAAG,MAAM;AACpBV,IAAAA,SAAS;AACV,GAFD;;AAGA,QAAMW,MAAM,GAAGC,WAAW,CAACF,OAAD,EAAU,IAAV,CAA1B;AACA,sBACE,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAAA,4BACI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;AAED,eAAeX,OAAO,CAACI,QAAD,EAAWG,WAAX,CAAP,CAA+BE,QAA/B,CAAf,C,CAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Layout from \"../layout/Layout\"\nimport ScreenshotViewer from \"../containers/ScreenshotViewer\"\nimport Table from \"../containers/Table\"\nimport { connect } from \"react-redux\";\nimport { countdown } from \"../redux/actions\"\nimport { useState, useEffect } from \"react\"\n\nconst mapState = state => ({\n  game_status: state.game_status,\n})\n\nconst mapDispatch  = dispatch => ({\n  countdown: () => dispatch(countdown()),\n})\n\nfunction HomePage({game_status, main_counter, countdown}) {\n//  const [number, setNumber] = useState(60)\n  const counter = () => {\n    countdown()\n  }\n  const interv = setInterval(counter, 1000)\n  return (\n    <Layout title=\"Challenge\">\n        <ScreenshotViewer />\n        <Table />\n    </Layout>\n  )\n}\n\nexport default connect(mapState, mapDispatch)(HomePage);\n\n\n\n// Dodać counter czasu gry\n// Dodanie POPUPa z podsumowaniem gry, który pojawia się po upływie czasu lub po kliknięciu QUIT\n// HINTS animation\n\n\n// React.useEffect(() => {\n//   game_status.isStarted ? \n//   startTimer()\n//   : console.log('game over')\n// }, [game_status.isStarted])\n// React.useEffect(() => {\n//   game_status.isRunning ? console.log('running') : game_status.isLoading && console.log('loading') \n// }, [game_status.isRunning])"]},"metadata":{},"sourceType":"module"}