{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const fetchNewGameDatabase = async difficulty => {\n  const database_array = [];\n  let page = 0;\n\n  switch (difficulty) {\n    case 0:\n      {\n        page = 1;\n        break;\n      }\n\n    case 1:\n      {\n        page = 4;\n        break;\n      }\n\n    case 2:\n      {\n        page = 7;\n        break;\n      }\n\n    default:\n      return [];\n  }\n\n  for (let i = 0; i < 3; i++) {\n    try {\n      const apishot = await fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n      const data = await apishot.json();\n      database_array.push(data.results.map(game => game = game.id));\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  }\n\n  console.log(database_array.flat());\n  return database_array.flat();\n};\nexport const getGameDetails = async game => {\n  console.log(game);\n\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game}`);\n    const game_details = await apishot.json();\n    return getGameScreenshots(game_details);\n  } catch (error) {\n    console.log(' getGameDetails');\n    console.log(error);\n    return {};\n  }\n};\n\nconst getGameScreenshots = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`);\n    const screenshots = await apishot.json(); // const game_screenshots = screenshots.results.splice(0,3).map(screen => screen = screen.image)\n\n    const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image);\n    const game_with_screenshots = {\n      id: game.id,\n      name: game.name,\n      altname: game.alternative_names,\n      screenshots: [...game_screenshots],\n      hints: [{\n        developer: game.developers[0].name\n      }, {\n        released: game.released\n      }, {\n        genre: game.genres[game.genres.length - 1].name\n      }]\n    };\n    return getSimilarGames(game_with_screenshots);\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};\n\nconst pick3randomsFromArray = array => {\n  const source = [...array];\n  const resultArray = [];\n\n  for (let i = 0; i < 3; i++) {\n    const randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nconst getSimilarGames = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`);\n    const suggested = await apishot.json();\n    const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name];\n    return _objectSpread(_objectSpread({}, game), {}, {\n      answers: [...answers]\n    });\n  } catch (error) {\n    console.log(error);\n    return [\"Error\", \"Error\", \"Error\"];\n  }\n};","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/global/fetch.js"],"names":["fetchNewGameDatabase","difficulty","database_array","page","i","apishot","fetch","data","json","push","results","map","game","id","error","console","log","flat","getGameDetails","game_details","getGameScreenshots","screenshots","game_screenshots","pick3randomsFromArray","screen","image","game_with_screenshots","name","altname","alternative_names","hints","developer","developers","released","genre","genres","length","getSimilarGames","array","source","resultArray","randomIndex","Math","floor","random","splice","suggested","answers"],"mappings":"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","sourcesContent":["\nexport const fetchNewGameDatabase = async (difficulty) => {\n    const database_array = []\n    let page = 0\n    switch(difficulty) {\n        case 0: {page = 1; break;}\n        case 1: {page = 4; break;}\n        case 2: {page = 7; break;}\n        default: return []\n    }\n    for(let i=0; i<3; i++) {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n            const data = await apishot.json()\n            database_array.push(data.results.map(game => game = game.id))\n        }\n        catch(error) {\n            console.log(error)\n            return []\n        }\n    }\n    console.log(database_array.flat())\n    return database_array.flat()\n}\n\nexport const getGameDetails = async (game) => {\n    console.log(game)\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(' getGameDetails')\n        console.log(error)\n        return {}\n    }\n}\n  \nconst getGameScreenshots = async (game) => {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            // const game_screenshots = screenshots.results.splice(0,3).map(screen => screen = screen.image)\n            const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image)\n            const game_with_screenshots = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: [\n                    {developer: game.developers[0].name},\n                    {released: game.released},\n                    {genre: game.genres[game.genres.length-1].name},\n                ],\n            }\n            return getSimilarGames(game_with_screenshots)\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n}\n\nconst pick3randomsFromArray = (array) => {\n    const source = [...array]\n    const resultArray = []\n    for (let i=0; i<3; i++) {\n        const randomIndex = Math.floor(Math.random() * source.length)\n        resultArray.push(source.splice(randomIndex, 1)[0])\n    }\n    return resultArray\n}\n\nconst getSimilarGames = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`)\n        const suggested = await apishot.json()\n        const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name]\n        return {\n            ...game,\n            answers: [ ...answers]\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return [\"Error\", \"Error\", \"Error\"]\n    }\n}"]},"metadata":{},"sourceType":"module"}