{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/TableBottom.js\";\nimport Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\nexport default function TableBottom({\n  random_game,\n  game_status,\n  newAnswer,\n  getRandomGame,\n  screenshots_loaded\n}) {\n  const checkAnswer = async answer => {\n    const user_answer = answer.target.innerText === random_game.name ? {\n      title: random_game.name,\n      time: 3,\n      score: 2000,\n      correct: true\n    } : {\n      title: random_game.name,\n      time: 3,\n      score: 0,\n      correct: false\n    };\n    newAnswer(user_answer);\n    const randomik = await pickRandomGame(game_database);\n    getRandomGame(randomik);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    bottom: true,\n    children: game_status && random_game.answers && screenshots_loaded ? random_game.answers.map((answer, i) => /*#__PURE__*/_jsxDEV(Typography, {\n      answer: true,\n      onClick: answer => checkAnswer(answer),\n      children: answer\n    }, Math.floor(Math.random() * 10000), false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 48\n    }, this)) : ``\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/TableBottom.js"],"names":["Table","Typography","pickRandomGame","game_database","TableBottom","random_game","game_status","newAnswer","getRandomGame","screenshots_loaded","checkAnswer","answer","user_answer","target","innerText","name","title","time","score","correct","randomik","answers","map","i","Math","floor","random"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,+BAAlB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,eAAe,SAASC,WAAT,CAAqB;AAACC,EAAAA,WAAD;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA,SAA3B;AAAsCC,EAAAA,aAAtC;AAAqDC,EAAAA;AAArD,CAArB,EAA+F;AAC5G,QAAMC,WAAW,GAAG,MAAOC,MAAP,IAAkB;AACpC,UAAMC,WAAW,GAAGD,MAAM,CAACE,MAAP,CAAcC,SAAd,KAA4BT,WAAW,CAACU,IAAxC,GAA+C;AACjEC,MAAAA,KAAK,EAAEX,WAAW,CAACU,IAD8C;AAEjEE,MAAAA,IAAI,EAAE,CAF2D;AAGjEC,MAAAA,KAAK,EAAE,IAH0D;AAIjEC,MAAAA,OAAO,EAAE;AAJwD,KAA/C,GAKhB;AACFH,MAAAA,KAAK,EAAEX,WAAW,CAACU,IADjB;AAEFE,MAAAA,IAAI,EAAE,CAFJ;AAGFC,MAAAA,KAAK,EAAE,CAHL;AAIFC,MAAAA,OAAO,EAAE;AAJP,KALJ;AAWAZ,IAAAA,SAAS,CAACK,WAAD,CAAT;AACA,UAAMQ,QAAQ,GAAG,MAAMlB,cAAc,CAACC,aAAD,CAArC;AACAK,IAAAA,aAAa,CAACY,QAAD,CAAb;AACD,GAfD;;AAgBA,sBACE,QAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAA,cACId,WAAW,IAAID,WAAW,CAACgB,OAA3B,IAAsCZ,kBAAvC,GACCJ,WAAW,CAACgB,OAAZ,CAAoBC,GAApB,CAAwB,CAACX,MAAD,EAASY,CAAT,kBAAe,QAAC,UAAD;AAAkD,MAAA,MAAM,MAAxD;AAAyD,MAAA,OAAO,EAAEZ,MAAM,IAAID,WAAW,CAACC,MAAD,CAAvF;AAAA,gBAAkGA;AAAlG,OAAiBa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAzB,CAAjB;AAAA;AAAA;AAAA;AAAA,YAAvC,CADD,GAEI;AAHP;AAAA;AAAA;AAAA;AAAA,UADF;AAOD","sourcesContent":["import Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport { pickRandomGame } from \"../../../global/fetch\"\nimport { game_database } from \"../../../global/const\"\n\nexport default function TableBottom({random_game, game_status, newAnswer, getRandomGame, screenshots_loaded}) {\n  const checkAnswer = async (answer) => {\n    const user_answer = answer.target.innerText === random_game.name ? {\n      title: random_game.name,\n      time: 3,\n      score: 2000,\n      correct: true,\n    } : {\n      title: random_game.name,\n      time: 3,\n      score: 0,\n      correct: false,\n    }\n    newAnswer(user_answer)\n    const randomik = await pickRandomGame(game_database)\n    getRandomGame(randomik)\n  }\n  return (\n    <Table bottom>\n      {(game_status && random_game.answers && screenshots_loaded) ? (\n        random_game.answers.map((answer, i) => <Typography key={Math.floor(Math.random()*10000)} answer onClick={answer => checkAnswer(answer)}>{answer}</Typography>)\n      ) : ``}\n    </Table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}