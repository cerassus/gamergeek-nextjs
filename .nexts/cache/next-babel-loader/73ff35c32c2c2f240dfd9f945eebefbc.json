{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from \"redux\";\nimport * as actions from \"./actions\";\nimport { games as source } from \"../global/games\";\n\nvar game_database = _toConsumableArray(source.results).map(function (game, i) {\n  return game = {\n    id: i + 1,\n    title: game.name,\n    screenshots: _toConsumableArray(game.short_screenshots.slice(0, 3).map(function (screenshot) {\n      return screenshot.image;\n    })),\n    hints: {\n      genre: game.genres[game.genres.length - 1].name,\n      year: game.released\n    }\n  };\n}); // const game_database = (state = initialState, action) => action === actions.SELECT_GAME ? initialState : state\n\n\nvar game_status = function game_status() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return action.type === actions.START_GAME ? true : action.type === actions.STOP_GAME ? false : state;\n};\n\nvar random_game = function random_game() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.START_GAME:\n      {\n        var randomIndex = Math.floor(Math.random() * 40);\n        var game = game_database[randomIndex];\n        game_database.splice(randomIndex, 1);\n        console.log(game_database);\n        return game;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  game_status: game_status,\n  random_game: random_game\n});","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/redux/reducers.js"],"names":["combineReducers","actions","games","source","game_database","results","map","game","i","id","title","name","screenshots","short_screenshots","slice","screenshot","image","hints","genre","genres","length","year","released","game_status","state","action","type","START_GAME","STOP_GAME","random_game","randomIndex","Math","floor","random","splice","console","log"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,SAASC,KAAK,IAAIC,MAAlB,QAAgC,iBAAhC;;AAEA,IAAMC,aAAa,GAAG,mBAAID,MAAM,CAACE,OAAX,EAAoBC,GAApB,CAAwB,UAACC,IAAD,EAAMC,CAAN;AAAA,SAAYD,IAAI,GAAG;AAC7DE,IAAAA,EAAE,EAAED,CAAC,GAAC,CADuD;AAE7DE,IAAAA,KAAK,EAAEH,IAAI,CAACI,IAFiD;AAG7DC,IAAAA,WAAW,qBACJL,IAAI,CAACM,iBAAL,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmCR,GAAnC,CAAuC,UAAAS,UAAU;AAAA,aAAIA,UAAU,CAACC,KAAf;AAAA,KAAjD,CADI,CAHkD;AAM7DC,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,MAAL,CAAYZ,IAAI,CAACY,MAAL,CAAYC,MAAZ,GAAmB,CAA/B,EAAkCT,IADtC;AAEHU,MAAAA,IAAI,EAAEd,IAAI,CAACe;AAFR;AANsD,GAAnB;AAAA,CAAxB,CAAtB,C,CAYA;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAACC,KAAD,uEAAS,KAAT;AAAA,MAAgBC,MAAhB;AAAA,SAA2BA,MAAM,CAACC,IAAP,KAAgBzB,OAAO,CAAC0B,UAAxB,GAAqC,IAArC,GAA4CF,MAAM,CAACC,IAAP,KAAgBzB,OAAO,CAAC2B,SAAxB,GAAoC,KAApC,GAA4CJ,KAAnH;AAAA,CAApB;;AAEA,IAAMK,WAAW,GAAG,SAAdA,WAAc,GAAwB;AAAA,MAAvBL,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACxC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKzB,OAAO,CAAC0B,UAAb;AAAyB;AACrB,YAAIG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAlB;AACA,YAAI1B,IAAI,GAAGH,aAAa,CAAC0B,WAAD,CAAxB;AACA1B,QAAAA,aAAa,CAAC8B,MAAd,CAAqBJ,WAArB,EAAkC,CAAlC;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYhC,aAAZ;AACA,eAAOG,IAAP;AACH;;AACD;AAAS,aAAOiB,KAAP;AARb;AAUH,CAXD;;AAaA,eAAexB,eAAe,CAAC;AAC7BuB,EAAAA,WAAW,EAAXA,WAD6B;AAE7BM,EAAAA,WAAW,EAAXA;AAF6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\"\nimport * as actions from \"./actions\"\nimport { games as source } from \"../global/games\"\n\nconst game_database = [...source.results].map((game,i) => game = {\n    id: i+1,\n    title: game.name,\n    screenshots: [\n        ...game.short_screenshots.slice(0, 3).map(screenshot => screenshot.image)\n    ],\n    hints: {\n        genre: game.genres[game.genres.length-1].name,\n        year: game.released,\n    }\n})\n\n// const game_database = (state = initialState, action) => action === actions.SELECT_GAME ? initialState : state\n\nconst game_status = (state = false, action) => action.type === actions.START_GAME ? true : action.type === actions.STOP_GAME ? false : state\n\nconst random_game = (state = \"\", action) => {\n    switch(action.type) {\n        case actions.START_GAME: {\n            let randomIndex = Math.floor(Math.random()*40);\n            let game = game_database[randomIndex];\n            game_database.splice(randomIndex, 1);\n            console.log(game_database);\n            return game;\n        }\n        default: return state\n    } \n}\n\nexport default combineReducers({\n  game_status,\n  random_game,\n})"]},"metadata":{},"sourceType":"module"}