{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport Table from \"../../../styled-components/Table\";\nimport Typography from \"../../../styled-components/Typography\";\nimport { useState, useEffect } from \"react\";\nimport moment from 'moment';\nexport default function GameNavigatorBottom({\n  game_is_started,\n  game_is_loading,\n  hintCounter,\n  random_game,\n  pushNewAnswer,\n  loadNewQuestion,\n  startLoading\n}) {\n  const {\n    0: answerTimeStart,\n    1: setAnswerTimeStart\n  } = useState(false);\n\n  const checkAnswer = async answer => {\n    const answerTimeEnd = moment();\n    const user_answer = answer === random_game.name ? {\n      title: random_game.name,\n      time: answerTimeEnd.diff(answerTimeStart),\n      score: Number((1000 / answerTimeEnd.diff(answerTimeStart) * 10000 * ((10 - hintCounter) / 10)).toFixed()),\n      correct: true,\n      hints_used: hintCounter\n    } : {\n      title: random_game.name,\n      time: answerTimeEnd.diff(answerTimeStart),\n      score: 0,\n      correct: false,\n      hints_used: hintCounter\n    };\n    startLoading();\n    pushNewAnswer(user_answer);\n    loadNewQuestion();\n  };\n\n  useEffect(() => {\n    !game_is_loading && setAnswerTimeStart(moment());\n  }, [game_is_loading]);\n  return /*#__PURE__*/_jsx(Table, {\n    bottom: true,\n    children: game_is_started && !game_is_loading && random_game.answers ? random_game.answers.map((answer, i) => /*#__PURE__*/_jsx(Typography, {\n      answer: true,\n      onClick: answer => checkAnswer(answer.target.innerText),\n      children: answer\n    }, \"key0021\" + i)) : ``\n  });\n}","map":null,"metadata":{},"sourceType":"module"}