{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getGameDetails } from \"../global/fetchGameDetails\";\nimport store from \"./store\";\nexport var START_GAME = \"START_GAME\";\nexport var RESUME_GAME = \"RESUME_GAME\";\nexport var END_GAME = \"END_GAME\";\nexport var SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nexport var NEW_ANSWER = \"NEW_ANSWER\";\nexport var CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nexport var START_LOADING = \"START_LOADING\";\nexport var SHOW_HINT = \"SHOW_HINT\";\nexport var NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nexport var REMOVE_ITEM = \"REMOVE_ITEM\";\nexport var SHOW_POPUP = \"SHOW_POPUP\";\nexport var SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\nexport var TEST = \"TEST\";\nexport var startGame = function startGame() {\n  return {\n    type: START_GAME\n  };\n};\nexport var resumeGame = function resumeGame() {\n  return {\n    type: RESUME_GAME\n  };\n};\nexport var endGame = function endGame() {\n  return {\n    type: END_GAME\n  };\n};\nexport var showRandomGame = function showRandomGame(game) {\n  return {\n    type: SHOW_RANDOM_GAME,\n    game: game\n  };\n};\nexport var pushNewAnswer = function pushNewAnswer(answer) {\n  return {\n    type: NEW_ANSWER,\n    answer: answer\n  };\n};\nexport var startLoading = function startLoading() {\n  return {\n    type: START_LOADING\n  };\n};\nexport var showHint = function showHint(hint) {\n  return {\n    type: SHOW_HINT,\n    hint: hint\n  };\n};\nexport var clearUserScore = function clearUserScore() {\n  return {\n    type: CLEAR_USER_SCORE\n  };\n};\nexport var newGameDatabase = function newGameDatabase(database) {\n  return {\n    type: NEW_GAME_DATABASE,\n    database: database\n  };\n};\nexport var removeItemFromDatabase = function removeItemFromDatabase(index) {\n  return {\n    type: REMOVE_ITEM,\n    index: index\n  };\n};\nexport var showPopup = function showPopup(popup) {\n  return {\n    type: SHOW_POPUP,\n    popup: popup\n  };\n};\nexport var setHintCounter = function setHintCounter() {\n  return {\n    type: SET_HINT_COUNTER\n  };\n};\nexport var test = function test(payload) {\n  return {\n    type: TEST,\n    payload: payload\n  };\n};\nexport function loadNewQuestion() {\n  var difficulty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var game_database, randomIndex, fetchNewGameDatabase, _fetchNewGameDatabase;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _fetchNewGameDatabase = function _fetchNewGameDatabase3() {\n                _fetchNewGameDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(difficulty) {\n                  var database_array, page, i, apishot, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          database_array = [];\n                          page = 0;\n                          _context.t0 = difficulty;\n                          _context.next = _context.t0 === 0 ? 5 : _context.t0 === 1 ? 7 : _context.t0 === 2 ? 9 : 11;\n                          break;\n\n                        case 5:\n                          page = 1;\n                          return _context.abrupt(\"break\", 12);\n\n                        case 7:\n                          page = 4;\n                          return _context.abrupt(\"break\", 12);\n\n                        case 9:\n                          page = 7;\n                          return _context.abrupt(\"break\", 12);\n\n                        case 11:\n                          return _context.abrupt(\"return\", []);\n\n                        case 12:\n                          i = 0;\n\n                        case 13:\n                          if (!(i < 3)) {\n                            _context.next = 31;\n                            break;\n                          }\n\n                          _context.prev = 14;\n                          _context.next = 17;\n                          return fetch(\"https://api.rawg.io/api/games?page=\".concat(page + i, \"&page_size=40\"));\n\n                        case 17:\n                          apishot = _context.sent;\n                          _context.next = 20;\n                          return apishot.json();\n\n                        case 20:\n                          data = _context.sent;\n                          database_array.push(data.results.map(function (game) {\n                            return game = game.id;\n                          }));\n                          _context.next = 28;\n                          break;\n\n                        case 24:\n                          _context.prev = 24;\n                          _context.t1 = _context[\"catch\"](14);\n                          console.log(_context.t1);\n                          return _context.abrupt(\"return\", []);\n\n                        case 28:\n                          i++;\n                          _context.next = 13;\n                          break;\n\n                        case 31:\n                          _context.next = 33;\n                          return dispatch(newGameDatabase(database_array.flat()));\n\n                        case 33:\n                          return _context.abrupt(\"return\", dispatch(loadNewQuestion()));\n\n                        case 34:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[14, 24]]);\n                }));\n                return _fetchNewGameDatabase.apply(this, arguments);\n              };\n\n              fetchNewGameDatabase = function _fetchNewGameDatabase2(_x2) {\n                return _fetchNewGameDatabase.apply(this, arguments);\n              };\n\n              game_database = store.getState().game_database;\n              randomIndex = Math.floor(Math.random() * game_database.length);\n\n              if (!(game_database.length === 0)) {\n                _context2.next = 8;\n                break;\n              }\n\n              difficulty ? fetchNewGameDatabase(difficulty - 1) : dispatch(endGame());\n              _context2.next = 22;\n              break;\n\n            case 8:\n              _context2.t0 = dispatch;\n              _context2.t2 = showRandomGame;\n              _context2.next = 12;\n              return getGameDetails(game_database[randomIndex]);\n\n            case 12:\n              _context2.t3 = _context2.sent;\n\n              if (_context2.t3) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.t3 = 'error';\n\n            case 15:\n              _context2.t4 = _context2.t3;\n              _context2.t1 = (0, _context2.t2)(_context2.t4);\n\n              if (_context2.t1) {\n                _context2.next = 19;\n                break;\n              }\n\n              _context2.t1 = 'error';\n\n            case 19:\n              _context2.t5 = _context2.t1;\n              (0, _context2.t0)(_context2.t5);\n              dispatch(removeItemFromDatabase(randomIndex));\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n} // export function loadNewQuestion() {\n//     return async function(dispatch) {\n//         const game_database = store.getState().game_database\n//         const randomIndex = Math.floor(Math.random() * game_database.length)\n//         if(game_database === 0) {\n//           dispatch(endGame()) \n//         } else {\n//             dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])))\n//             dispatch(removeItemFromDatabase(randomIndex))\n//         }\n//     }\n// }\n// export function fetchNewGameDatabase(difficulty) {\n//     return async function(dispatch) {\n//         const database_array = []\n//         let page = 0\n//         switch(difficulty) {\n//             case 0: {page = 1; break;}\n//             case 1: {page = 4; break;}\n//             case 2: {page = 7; break;}\n//             default: return []\n//         }\n//         for(let i=0; i<3; i++) {\n//             try {\n//                 const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n//                 const data = await apishot.json()\n//                 database_array.push(data.results.map(game => game = game.id))\n//             }\n//             catch(error) {\n//                 console.log(error)\n//                 return []\n//             }\n//         }\n//         console.log('rgfg2')\n//          await dispatch(newGameDatabase(database_array.flat()))\n//         return dispatch(loadNewQuestion())\n//     }\n// }\n///////////// COMBINE LOAD QUESTION AND FETCHNEWGAME DB","map":null,"metadata":{},"sourceType":"module"}