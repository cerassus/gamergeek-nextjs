{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var fetchNewGameDatabase = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(difficulty) {\n    var database_array, page, i, apishot, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            database_array = [];\n            page = 0;\n            _context.t0 = difficulty;\n            _context.next = _context.t0 === 0 ? 5 : _context.t0 === 1 ? 7 : _context.t0 === 2 ? 9 : 11;\n            break;\n\n          case 5:\n            page = 1;\n            return _context.abrupt(\"break\", 12);\n\n          case 7:\n            page = 4;\n            return _context.abrupt(\"break\", 12);\n\n          case 9:\n            page = 7;\n            return _context.abrupt(\"break\", 12);\n\n          case 11:\n            return _context.abrupt(\"return\", []);\n\n          case 12:\n            i = 0;\n\n          case 13:\n            if (!(i < 3)) {\n              _context.next = 31;\n              break;\n            }\n\n            _context.prev = 14;\n            _context.next = 17;\n            return fetch(\"https://api.rawg.io/api/games?page=\".concat(page + i, \"&page_size=40\"));\n\n          case 17:\n            apishot = _context.sent;\n            _context.next = 20;\n            return apishot.json();\n\n          case 20:\n            data = _context.sent;\n            database_array.push(data.results.map(function (game) {\n              return game = {\n                id: game.id\n              };\n            }));\n            _context.next = 28;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t1 = _context[\"catch\"](14);\n            console.log(_context.t1);\n            return _context.abrupt(\"return\", []);\n\n          case 28:\n            i++;\n            _context.next = 13;\n            break;\n\n          case 31:\n            console.log(database_array.flat());\n            return _context.abrupt(\"return\", database_array.flat());\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[14, 24]]);\n  }));\n\n  return function fetchNewGameDatabase(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getGameDetails = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(game) {\n    var apishot, game_details;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(game);\n            console.log(game.id);\n            _context2.prev = 2;\n            _context2.next = 5;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id));\n\n          case 5:\n            apishot = _context2.sent;\n            _context2.next = 8;\n            return apishot.json();\n\n          case 8:\n            game_details = _context2.sent;\n            return _context2.abrupt(\"return\", getGameScreenshots(game_details));\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.log(' getGameDetails');\n            console.log(_context2.t0);\n            return _context2.abrupt(\"return\", {});\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 12]]);\n  }));\n\n  return function getGameDetails(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getGameScreenshots = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(game) {\n    var apishot, screenshots, game_screenshots, game_with_screenshots;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/screenshots\"));\n\n          case 3:\n            apishot = _context3.sent;\n            _context3.next = 6;\n            return apishot.json();\n\n          case 6:\n            screenshots = _context3.sent;\n            // const game_screenshots = screenshots.results.splice(0,3).map(screen => screen = screen.image)\n            game_screenshots = pick3randomsFromArray(screenshots.results).map(function (screen) {\n              return screen = screen.image;\n            });\n            game_with_screenshots = {\n              id: game.id,\n              name: game.name,\n              altname: game.alternative_names,\n              screenshots: _toConsumableArray(game_screenshots),\n              hints: [{\n                developer: game.developers[0].name\n              }, {\n                released: game.released\n              }, {\n                genre: game.genres[game.genres.length - 1].name\n              }]\n            };\n            return _context3.abrupt(\"return\", getSimilarGames(game_with_screenshots));\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n            return _context3.abrupt(\"return\", {});\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 12]]);\n  }));\n\n  return function getGameScreenshots(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar pick3randomsFromArray = function pick3randomsFromArray(array) {\n  var source = _toConsumableArray(array);\n\n  var resultArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    var randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nvar getSimilarGames = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(game) {\n    var apishot, suggested, answers;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/suggested\"));\n\n          case 3:\n            apishot = _context4.sent;\n            _context4.next = 6;\n            return apishot.json();\n\n          case 6:\n            suggested = _context4.sent;\n            answers = [].concat(_toConsumableArray(pick3randomsFromArray(suggested.results.map(function (game) {\n              return game = game.name;\n            }))), [game.name]);\n            return _context4.abrupt(\"return\", _objectSpread(_objectSpread({}, game), {}, {\n              answers: _toConsumableArray(answers)\n            }));\n\n          case 11:\n            _context4.prev = 11;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n            return _context4.abrupt(\"return\", [\"Error\", \"Error\", \"Error\"]);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 11]]);\n  }));\n\n  return function getSimilarGames(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/global/fetch.js"],"names":["fetchNewGameDatabase","difficulty","database_array","page","i","fetch","apishot","json","data","push","results","map","game","id","console","log","flat","getGameDetails","game_details","getGameScreenshots","screenshots","game_screenshots","pick3randomsFromArray","screen","image","game_with_screenshots","name","altname","alternative_names","hints","developer","developers","released","genre","genres","length","getSimilarGames","array","source","resultArray","randomIndex","Math","floor","random","splice","suggested","answers"],"mappings":"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","sourcesContent":["\nexport const fetchNewGameDatabase = async (difficulty) => {\n    const database_array = []\n    let page = 0\n    switch(difficulty) {\n        case 0: {page = 1; break;}\n        case 1: {page = 4; break;}\n        case 2: {page = 7; break;}\n        default: return []\n    }\n    for(let i=0; i<3; i++) {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n            const data = await apishot.json()\n            database_array.push(data.results.map(game => game = {\n                id: game.id,\n            }))\n        }\n        catch(error) {\n            console.log(error)\n            return []\n        }\n    }\n    console.log(database_array.flat())\n    return database_array.flat()\n}\n\nexport const getGameDetails = async (game) => {\n    console.log(game)\n    console.log(game.id)\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(' getGameDetails')\n        console.log(error)\n        return {}\n    }\n}\n  \nconst getGameScreenshots = async (game) => {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            // const game_screenshots = screenshots.results.splice(0,3).map(screen => screen = screen.image)\n            const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image)\n            const game_with_screenshots = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: [\n                    {developer: game.developers[0].name},\n                    {released: game.released},\n                    {genre: game.genres[game.genres.length-1].name},\n                ],\n            }\n            return getSimilarGames(game_with_screenshots)\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n}\n\nconst pick3randomsFromArray = (array) => {\n    const source = [...array]\n    const resultArray = []\n    for (let i=0; i<3; i++) {\n        const randomIndex = Math.floor(Math.random() * source.length)\n        resultArray.push(source.splice(randomIndex, 1)[0])\n    }\n    return resultArray\n}\n\nconst getSimilarGames = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`)\n        const suggested = await apishot.json()\n        const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name]\n        return {\n            ...game,\n            answers: [ ...answers]\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return [\"Error\", \"Error\", \"Error\"]\n    }\n}"]},"metadata":{},"sourceType":"module"}