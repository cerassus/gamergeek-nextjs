{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const pickRandomGame = database => {\n  const randomIndex = Math.floor(Math.random() * database.length);\n  const game = database[randomIndex];\n  database.splice(randomIndex, 1);\n  return getGameDetails(game);\n};\n\nconst getGameDetails = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`);\n    const game_details = await apishot.json();\n    return getGameScreenshots(game_details);\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};\n\nconst getGameScreenshots = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`);\n    const screenshots = await apishot.json();\n    const game_screenshots = screenshots.results.splice(0, 3).map(screen => screen = screen.image);\n    const game_with_screenshots = {\n      id: game.id,\n      name: game.name,\n      altname: game.alternative_names,\n      screenshots: [...game_screenshots],\n      hints: {\n        developer: game.developers[0].name,\n        released: game.released,\n        genre: game.genres[game.genres.length - 1].name\n      }\n    };\n    return getSimilarGames(game_with_screenshots);\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};\n\nconst pick3randomsFromArray = array => {\n  const source = [...array];\n  const resultArray = [];\n\n  for (let i = 0; i < 3; i++) {\n    const randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nconst getSimilarGames = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`);\n    const suggested = await apishot.json();\n    const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name];\n    return _objectSpread(_objectSpread({}, game), {}, {\n      answers: [...answers]\n    });\n  } catch (error) {\n    console.log(error);\n    return [\"Error\", \"Error\", \"Error\"];\n  }\n};","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/global/fetch.js"],"names":["pickRandomGame","database","randomIndex","Math","floor","random","length","game","splice","getGameDetails","apishot","fetch","id","game_details","json","getGameScreenshots","error","console","log","screenshots","game_screenshots","results","map","screen","image","game_with_screenshots","name","altname","alternative_names","hints","developer","developers","released","genre","genres","getSimilarGames","pick3randomsFromArray","array","source","resultArray","i","push","suggested","answers"],"mappings":"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","sourcesContent":["\nexport const pickRandomGame = (database) => {\n    const randomIndex = Math.floor(Math.random() * database.length)\n    const game = database[randomIndex]\n    database.splice(randomIndex, 1)\n    return getGameDetails(game)\n}\n\nconst getGameDetails = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}\n  \nconst getGameScreenshots = async (game) => {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            const game_screenshots = screenshots.results.splice(0,3).map(screen => screen = screen.image)\n            const game_with_screenshots = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: {\n                    developer: game.developers[0].name,\n                    released: game.released,\n                    genre: game.genres[game.genres.length-1].name,\n                },\n            }\n            return getSimilarGames(game_with_screenshots)\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n}\n\nconst pick3randomsFromArray = (array) => {\n    const source = [...array]\n    const resultArray = []\n    for (let i=0; i<3; i++) {\n        const randomIndex = Math.floor(Math.random() * source.length)\n        resultArray.push(source.splice(randomIndex, 1)[0])\n    }\n    return resultArray\n}\n\nconst getSimilarGames = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`)\n        const suggested = await apishot.json()\n        const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name]\n        return {\n            ...game,\n            answers: [ ...answers]\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return [\"Error\", \"Error\", \"Error\"]\n    }\n}"]},"metadata":{},"sourceType":"module"}