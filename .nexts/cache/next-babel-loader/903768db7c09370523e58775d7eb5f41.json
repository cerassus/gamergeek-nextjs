{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const pickRandomGame = database => {\n  const randomIndex = Math.floor(Math.random() * database.length);\n  const game = database[randomIndex];\n  database.splice(randomIndex, 1);\n  console.log(database);\n  return getGameDetails(game);\n};\nexport const getGameDetails = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`);\n    const game_details = await apishot.json();\n    console.log(game_details);\n    return getGameScreenshots(game_details);\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};\nexport const getGameScreenshots = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`);\n    const screenshots = await apishot.json();\n    const game_screenshots = screenshots.results.splice(0, 3);\n\n    const gamess = _objectSpread(_objectSpread({}, game), {}, {\n      id: game.id,\n      name: game.name,\n      altname: game.alternative_names,\n      screenshots: [...game_screenshots],\n      hints: {\n        developer: game.developers[0].name,\n        released: game.released,\n        genre: game.genres[game.genres.length - 1].name\n      }\n    });\n\n    console.log(gamess);\n    return gamess;\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/global/fetch.js"],"names":["pickRandomGame","database","randomIndex","Math","floor","random","length","game","splice","console","log","getGameDetails","apishot","fetch","id","game_details","json","getGameScreenshots","error","screenshots","game_screenshots","results","gamess","name","altname","alternative_names","hints","developer","developers","released","genre","genres"],"mappings":";;;;;;AAAA,OAAO,MAAMA,cAAc,GAAIC,QAAD,IAAc;AACxC,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,QAAQ,CAACK,MAApC,CAApB;AACA,QAAMC,IAAI,GAAGN,QAAQ,CAACC,WAAD,CAArB;AACAD,EAAAA,QAAQ,CAACO,MAAT,CAAgBN,WAAhB,EAA6B,CAA7B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,SAAOU,cAAc,CAACJ,IAAD,CAArB;AACH,CANM;AAQP,OAAO,MAAMI,cAAc,GAAG,MAAOJ,IAAP,IAAgB;AAC1C,MAAI;AACA,UAAMK,OAAO,GAAG,MAAMC,KAAK,CAAE,iCAAgCN,IAAI,CAACO,EAAG,EAA1C,CAA3B;AACA,UAAMC,YAAY,GAAG,MAAMH,OAAO,CAACI,IAAR,EAA3B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYK,YAAZ;AACA,WAAOE,kBAAkB,CAACF,YAAD,CAAzB;AACH,GALD,CAMA,OAAMG,KAAN,EAAa;AACTT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACA,WAAO,EAAP;AACH;AACJ,CAXM;AAaP,OAAO,MAAMD,kBAAkB,GAAG,MAAOV,IAAP,IAAgB;AAC9C,MAAI;AACA,UAAMK,OAAO,GAAG,MAAMC,KAAK,CAAE,iCAAgCN,IAAI,CAACO,EAAG,cAA1C,CAA3B;AACA,UAAMK,WAAW,GAAG,MAAMP,OAAO,CAACI,IAAR,EAA1B;AACA,UAAMI,gBAAgB,GAAGD,WAAW,CAACE,OAAZ,CAAoBb,MAApB,CAA2B,CAA3B,EAA6B,CAA7B,CAAzB;;AACA,UAAMc,MAAM,mCACLf,IADK;AAERO,MAAAA,EAAE,EAAEP,IAAI,CAACO,EAFD;AAGRS,MAAAA,IAAI,EAAEhB,IAAI,CAACgB,IAHH;AAIRC,MAAAA,OAAO,EAAEjB,IAAI,CAACkB,iBAJN;AAKRN,MAAAA,WAAW,EAAE,CAAC,GAAGC,gBAAJ,CALL;AAMRM,MAAAA,KAAK,EAAE;AACHC,QAAAA,SAAS,EAAEpB,IAAI,CAACqB,UAAL,CAAgB,CAAhB,EAAmBL,IAD3B;AAEHM,QAAAA,QAAQ,EAAEtB,IAAI,CAACsB,QAFZ;AAGHC,QAAAA,KAAK,EAAEvB,IAAI,CAACwB,MAAL,CAAYxB,IAAI,CAACwB,MAAL,CAAYzB,MAAZ,GAAmB,CAA/B,EAAkCiB;AAHtC;AANC,MAAZ;;AAYAd,IAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ;AACA,WAAOA,MAAP;AACH,GAlBD,CAmBA,OAAMJ,KAAN,EAAa;AACTT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACA,WAAO,EAAP;AACH;AACJ,CAxBM","sourcesContent":["export const pickRandomGame = (database) => {\n    const randomIndex = Math.floor(Math.random() * database.length)\n    const game = database[randomIndex]\n    database.splice(randomIndex, 1)\n    console.log(database)\n    return getGameDetails(game)\n}\n\nexport const getGameDetails = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`)\n        const game_details = await apishot.json()\n        console.log(game_details)\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}\n  \nexport const getGameScreenshots = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n        const screenshots = await apishot.json()\n        const game_screenshots = screenshots.results.splice(0,3)\n        const gamess = {\n            ...game,\n            id: game.id,\n            name: game.name,\n            altname: game.alternative_names,\n            screenshots: [...game_screenshots],\n            hints: {\n                developer: game.developers[0].name,\n                released: game.released,\n                genre: game.genres[game.genres.length-1].name,\n            }\n        }\n        console.log(gamess)\n        return gamess\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}"]},"metadata":{},"sourceType":"module"}