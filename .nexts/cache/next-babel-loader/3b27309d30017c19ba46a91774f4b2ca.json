{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/TableBottom.js\";\nimport Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\nexport default function TableBottom(_ref) {\n  var _this = this;\n\n  var random_game = _ref.random_game,\n      game_status = _ref.game_status,\n      newAnswer = _ref.newAnswer,\n      getRandomGame = _ref.getRandomGame,\n      screenshots_loaded = _ref.screenshots_loaded;\n\n  var checkAnswer = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(answer) {\n      var user_answer, randomik;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              user_answer = answer.target.innerText === random_game.name ? {\n                title: random_game.name,\n                time: 3,\n                score: 2000,\n                correct: true\n              } : {\n                title: random_game.name,\n                time: 3,\n                score: 0,\n                correct: false\n              };\n              newAnswer(user_answer);\n              _context.next = 4;\n              return pickRandomGame(game_database);\n\n            case 4:\n              randomik = _context.sent;\n              getRandomGame(randomik);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function checkAnswer(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    bottom: true,\n    children: game_status && random_game.answers && screenshots_loaded === 'loaded' ? random_game.answers.map(function (answer, i) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        answer: true,\n        onClick: function onClick(answer) {\n          return checkAnswer(answer);\n        },\n        children: answer\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 48\n      }, _this);\n    }) : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c = TableBottom;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableBottom\");","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/TableBottom.js"],"names":["Table","Typography","pickRandomGame","game_database","TableBottom","random_game","game_status","newAnswer","getRandomGame","screenshots_loaded","checkAnswer","answer","user_answer","target","innerText","name","title","time","score","correct","randomik","answers","map","i"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,+BAAlB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,eAAe,SAASC,WAAT,OAA+F;AAAA;;AAAA,MAAzEC,WAAyE,QAAzEA,WAAyE;AAAA,MAA5DC,WAA4D,QAA5DA,WAA4D;AAAA,MAA/CC,SAA+C,QAA/CA,SAA+C;AAAA,MAApCC,aAAoC,QAApCA,aAAoC;AAAA,MAArBC,kBAAqB,QAArBA,kBAAqB;;AAC5G,MAAMC,WAAW;AAAA,yEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,cAAAA,WADY,GACED,MAAM,CAACE,MAAP,CAAcC,SAAd,KAA4BT,WAAW,CAACU,IAAxC,GAA+C;AACjEC,gBAAAA,KAAK,EAAEX,WAAW,CAACU,IAD8C;AAEjEE,gBAAAA,IAAI,EAAE,CAF2D;AAGjEC,gBAAAA,KAAK,EAAE,IAH0D;AAIjEC,gBAAAA,OAAO,EAAE;AAJwD,eAA/C,GAKhB;AACFH,gBAAAA,KAAK,EAAEX,WAAW,CAACU,IADjB;AAEFE,gBAAAA,IAAI,EAAE,CAFJ;AAGFC,gBAAAA,KAAK,EAAE,CAHL;AAIFC,gBAAAA,OAAO,EAAE;AAJP,eANc;AAYlBZ,cAAAA,SAAS,CAACK,WAAD,CAAT;AAZkB;AAAA,qBAaKV,cAAc,CAACC,aAAD,CAbnB;;AAAA;AAaZiB,cAAAA,QAbY;AAclBZ,cAAAA,aAAa,CAACY,QAAD,CAAb;;AAdkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXV,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAgBA,sBACE,QAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAA,cACIJ,WAAW,IAAID,WAAW,CAACgB,OAA3B,IAAsCZ,kBAAkB,KAAK,QAA9D,GACCJ,WAAW,CAACgB,OAAZ,CAAoBC,GAApB,CAAwB,UAACX,MAAD,EAASY,CAAT;AAAA,0BAAe,QAAC,UAAD;AAAoB,QAAA,MAAM,MAA1B;AAA2B,QAAA,OAAO,EAAE,iBAAAZ,MAAM;AAAA,iBAAID,WAAW,CAACC,MAAD,CAAf;AAAA,SAA1C;AAAA,kBAAoEA;AAApE,SAAiBY,CAAjB;AAAA;AAAA;AAAA;AAAA,eAAf;AAAA,KAAxB,CADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;KAxBuBnB,W","sourcesContent":["import Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport { pickRandomGame } from \"../../../global/fetch\"\nimport { game_database } from \"../../../global/const\"\n\nexport default function TableBottom({random_game, game_status, newAnswer, getRandomGame, screenshots_loaded}) {\n  const checkAnswer = async (answer) => {\n    const user_answer = answer.target.innerText === random_game.name ? {\n      title: random_game.name,\n      time: 3,\n      score: 2000,\n      correct: true,\n    } : {\n      title: random_game.name,\n      time: 3,\n      score: 0,\n      correct: false,\n    }\n    newAnswer(user_answer)\n    const randomik = await pickRandomGame(game_database)\n    getRandomGame(randomik)\n  }\n  return (\n    <Table bottom>\n      {(game_status && random_game.answers && screenshots_loaded === 'loaded') ? (\n        random_game.answers.map((answer, i) => <Typography key={i} answer onClick={answer => checkAnswer(answer)}>{answer}</Typography>)\n      ) : ``}\n    </Table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}