{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/Table.js\";\nimport Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport React from \"react\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\nimport moment from 'moment';\nconst game_difficulty = [\"easy\", \"medium\", \"hard\"];\nexport default function TableComponent({\n  game_status,\n  random_game,\n  startGame,\n  loadNewGame,\n  endGame,\n  showRandomGame,\n  pushNewAnswer\n}) {\n  const [difficultyChoicePanel, showDifficultyChoicePanel] = React.useState(false);\n  const [answerTimeStart, setAnswerTimeStart] = React.useState(false);\n  const [hintCounter, setHintCounter] = React.useState(0);\n\n  const stop = () => {\n    showDifficultyChoicePanel(false);\n    endGame();\n  };\n\n  const start = async difficulty => {\n    difficulty && startGame(difficulty);\n    loadNewGame();\n    showRandomGame(await pickRandomGame(game_database));\n  };\n\n  const checkAnswer = async answer => {\n    const answerTimeEnd = moment();\n    const user_answer = answer === random_game.name ? {\n      title: random_game.name,\n      time: answerTimeEnd.diff(answerTimeStart),\n      score: 2000,\n      correct: true\n    } : {\n      title: random_game.name,\n      time: answerTimeEnd.diff(answerTimeStart),\n      score: 0,\n      correct: false\n    };\n    pushNewAnswer(user_answer);\n    start();\n  };\n\n  const getHint = () => {\n    showHint(random_game.hints.splice(Math.floor(Math.random() * 3), 1));\n    setHintCounter(hintCounter + 1);\n  };\n\n  React.useEffect(() => {\n    !game_status.isLoading && setAnswerTimeStart(moment());\n  }, [game_status.isLoading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      top: true,\n      children: [game_status.isRunning && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [hintCounter < 3 && /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: () => getHint(),\n          href: \"/\",\n          children: \"get a hint\"\n        }, \"key0011\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: () => checkAnswer(false),\n          children: \"skip\"\n        }, \"key0012\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: stop,\n          children: \"quit\"\n        }, \"key0013\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !game_status.isStarted && difficultyChoicePanel && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          children: [\"set difficulty:\", \" \"]\n        }, \"key0014\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), game_difficulty.map((diffe, i) => /*#__PURE__*/_jsxDEV(Typography, {\n          link: true,\n          onClick: () => start({\n            i\n          }),\n          children: diffe\n        }, \"key0011\" + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true), !game_status.isStarted && !difficultyChoicePanel && /*#__PURE__*/_jsxDEV(Typography, {\n        link: true,\n        onClick: () => showDifficultyChoicePanel(true),\n        children: \"start a new challenge\"\n      }, \"key0015\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 64\n      }, this), game_status.isLoading && /*#__PURE__*/_jsxDEV(Typography, {\n        link: true,\n        children: \"loading\"\n      }, 'key0016', false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      bottom: true,\n      children: game_status.isRunning && random_game.answers ? random_game.answers.map((answer, i) => /*#__PURE__*/_jsxDEV(Typography, {\n        answer: true,\n        onClick: answer => checkAnswer(answer.target.innerText),\n        children: answer\n      }, \"key0021\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)) : ``\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/components/main/challenge/Table.js"],"names":["Table","Typography","React","pickRandomGame","game_database","moment","game_difficulty","TableComponent","game_status","random_game","startGame","loadNewGame","endGame","showRandomGame","pushNewAnswer","difficultyChoicePanel","showDifficultyChoicePanel","useState","answerTimeStart","setAnswerTimeStart","hintCounter","setHintCounter","stop","start","difficulty","checkAnswer","answer","answerTimeEnd","user_answer","name","title","time","diff","score","correct","getHint","showHint","hints","splice","Math","floor","random","useEffect","isLoading","isRunning","isStarted","map","diffe","i","answers","target","innerText"],"mappings":"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","sourcesContent":["import Table from \"../../styled-components/Table\";\nimport Typography from \"../../styled-components/Typography\";\nimport React from \"react\";\nimport { pickRandomGame } from \"../../../global/fetch\";\nimport { game_database } from \"../../../global/const\";\nimport moment from 'moment'\n\nconst game_difficulty = [\"easy\", \"medium\", \"hard\"];\n\nexport default function TableComponent({\n  game_status,\n  random_game,\n  startGame,\n  loadNewGame,\n  endGame,\n  showRandomGame,\n  pushNewAnswer\n}) {\n  const [difficultyChoicePanel, showDifficultyChoicePanel] = React.useState(false)\n  const [answerTimeStart, setAnswerTimeStart] = React.useState(false)\n  const [hintCounter, setHintCounter] = React.useState(0)\n  const stop = () => {\n    showDifficultyChoicePanel(false)\n    endGame()\n  };\n  const start = async (difficulty) => {\n    difficulty && startGame(difficulty)\n    loadNewGame()\n    showRandomGame(await pickRandomGame(game_database))\n  };\n  const checkAnswer = async (answer) => {\n    const answerTimeEnd = moment()\n    const user_answer =\n      answer === random_game.name\n        ? {\n            title: random_game.name,\n            time: answerTimeEnd.diff(answerTimeStart),\n            score: 2000,\n            correct: true,\n          }\n        : {\n            title: random_game.name,\n            time: answerTimeEnd.diff(answerTimeStart),\n            score: 0,\n            correct: false,\n          };\n    pushNewAnswer(user_answer)\n    start()\n  }\n  const getHint = () => {\n    showHint(random_game.hints.splice(Math.floor(Math.random() * 3), 1))\n    setHintCounter(hintCounter + 1)\n  }\n  React.useEffect(() => {\n    !game_status.isLoading && setAnswerTimeStart(moment())\n  }, [game_status.isLoading])\n  return (\n    <>\n      <Table top>\n        {game_status.isRunning && (\n          <>\n            {hintCounter < 3 && <Typography key={\"key0011\"} link onClick={() => getHint()}href=\"/\">get a hint</Typography>}\n            <Typography key={\"key0012\"} link onClick={() => checkAnswer(false)}>skip</Typography>\n            <Typography key={\"key0013\"} link onClick={stop}>quit</Typography>\n          </>\n        )}\n        \n        {(!game_status.isStarted && difficultyChoicePanel) && (\n          <>\n            <Typography key={\"key0014\"} link>set difficulty:{\" \"}</Typography>\n            {game_difficulty.map((diffe, i) => (\n            <Typography key={\"key0011\"+i} link onClick={() => start({i})}>{diffe}</Typography>))}\n          </>\n        )}\n        \n        {(!game_status.isStarted && !difficultyChoicePanel) && <Typography key={\"key0015\"} link onClick={() => showDifficultyChoicePanel(true)}>start a new challenge</Typography>}\n        \n        {game_status.isLoading && <Typography key={'key0016'} link>loading</Typography>}\n      </Table>\n      <Table bottom>\n        {(game_status.isRunning && random_game.answers) ?\n        random_game.answers.map((answer, i) => (\n        <Typography key={\"key0021\"+i} answer onClick={(answer) => checkAnswer(answer.target.innerText)}>{answer}</Typography>))\n        : ``}\n      </Table>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}