{"ast":null,"code":"import { connect } from \"react-redux\";\nimport GameNavigatorTop from \"../components/main/challenge/containers/GameNavigatorTop\";\nimport { setHintCounter as _setHintCounter, loadNewQuestion as _loadNewQuestion, changePopup as _changePopup, skipQuestion as _skipQuestion, showHint as _showHint, endGame as _endGame } from \"../redux/actions\";\n\nvar mapState = function mapState(state) {\n  return {\n    game_is_started: state.game_status.isStarted,\n    game_is_loading: state.game_status.isLoading,\n    game_database: state.game_database,\n    random_game: state.random_game,\n    user_score: state.user_score,\n    hintCounter: state.hint_counter\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    changePopup: function changePopup(popup) {\n      return dispatch(_changePopup(popup));\n    },\n    endGame: function endGame() {\n      return dispatch(_endGame());\n    },\n    skipQuestion: function skipQuestion() {\n      return dispatch(_skipQuestion());\n    },\n    loadNewQuestion: function loadNewQuestion(db) {\n      return dispatch(_loadNewQuestion(db));\n    },\n    startLoading: function (_startLoading) {\n      function startLoading() {\n        return _startLoading.apply(this, arguments);\n      }\n\n      startLoading.toString = function () {\n        return _startLoading.toString();\n      };\n\n      return startLoading;\n    }(function () {\n      return dispatch(startLoading());\n    }),\n    showHint: function showHint() {\n      return dispatch(_showHint());\n    },\n    setHintCounter: function setHintCounter() {\n      return dispatch(_setHintCounter());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(GameNavigatorTop);","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/redux_containers/GameNavigatorTop.js"],"names":["connect","GameNavigatorTop","setHintCounter","loadNewQuestion","changePopup","skipQuestion","showHint","endGame","mapState","state","game_is_started","game_status","isStarted","game_is_loading","isLoading","game_database","random_game","user_score","hintCounter","hint_counter","mapDispatch","dispatch","popup","db","startLoading"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,gBAAP,MAA6B,0DAA7B;AACA,SAASC,cAAc,IAAdA,eAAT,EAAyBC,eAAe,IAAfA,gBAAzB,EAA0CC,WAAW,IAAXA,YAA1C,EAAuDC,YAAY,IAAZA,aAAvD,EAAqEC,QAAQ,IAARA,SAArE,EAA+EC,OAAO,IAAPA,QAA/E,QAA8F,kBAA9F;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAK;AACzBC,IAAAA,eAAe,EAAED,KAAK,CAACE,WAAN,CAAkBC,SADV;AAEzBC,IAAAA,eAAe,EAAEJ,KAAK,CAACE,WAAN,CAAkBG,SAFV;AAGzBC,IAAAA,aAAa,EAAEN,KAAK,CAACM,aAHI;AAIzBC,IAAAA,WAAW,EAAEP,KAAK,CAACO,WAJM;AAKzBC,IAAAA,UAAU,EAAER,KAAK,CAACQ,UALO;AAMzBC,IAAAA,WAAW,EAAET,KAAK,CAACU;AANM,GAAL;AAAA,CAAtB;;AASA,IAAMC,WAAW,GAAI,SAAfA,WAAe,CAAAC,QAAQ;AAAA,SAAK;AAChCjB,IAAAA,WAAW,EAAE,qBAACkB,KAAD;AAAA,aAAWD,QAAQ,CAACjB,YAAW,CAACkB,KAAD,CAAZ,CAAnB;AAAA,KADmB;AAEhCf,IAAAA,OAAO,EAAE;AAAA,aAAMc,QAAQ,CAACd,QAAO,EAAR,CAAd;AAAA,KAFuB;AAGhCF,IAAAA,YAAY,EAAE;AAAA,aAAMgB,QAAQ,CAAChB,aAAY,EAAb,CAAd;AAAA,KAHkB;AAIhCF,IAAAA,eAAe,EAAE,yBAACoB,EAAD;AAAA,aAAQF,QAAQ,CAAClB,gBAAe,CAACoB,EAAD,CAAhB,CAAhB;AAAA,KAJe;AAKhCC,IAAAA,YAAY;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAE;AAAA,aAAMH,QAAQ,CAACG,YAAY,EAAb,CAAd;AAAA,KAAF,CALoB;AAMhClB,IAAAA,QAAQ,EAAE;AAAA,aAAMe,QAAQ,CAACf,SAAQ,EAAT,CAAd;AAAA,KANsB;AAOhCJ,IAAAA,cAAc,EAAE;AAAA,aAAMmB,QAAQ,CAACnB,eAAc,EAAf,CAAd;AAAA;AAPgB,GAAL;AAAA,CAA7B;;AAUA,eAAeF,OAAO,CAACQ,QAAD,EAAWY,WAAX,CAAP,CAA+BnB,gBAA/B,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport GameNavigatorTop from \"../components/main/challenge/containers/GameNavigatorTop\"\nimport { setHintCounter, loadNewQuestion, changePopup, skipQuestion, showHint, endGame } from \"../redux/actions\"\n\nconst mapState = state => ({\n  game_is_started: state.game_status.isStarted,\n  game_is_loading: state.game_status.isLoading,\n  game_database: state.game_database,\n  random_game: state.random_game,\n  user_score: state.user_score,\n  hintCounter: state.hint_counter,\n})\n\nconst mapDispatch  = dispatch => ({\n  changePopup: (popup) => dispatch(changePopup(popup)),\n  endGame: () => dispatch(endGame()),\n  skipQuestion: () => dispatch(skipQuestion()),\n  loadNewQuestion: (db) => dispatch(loadNewQuestion(db)),\n  startLoading: () => dispatch(startLoading()),\n  showHint: () => dispatch(showHint()),\n  setHintCounter: () => dispatch(setHintCounter()),\n})\n\nexport default connect(mapState, mapDispatch)(GameNavigatorTop);\n"]},"metadata":{},"sourceType":"module"}