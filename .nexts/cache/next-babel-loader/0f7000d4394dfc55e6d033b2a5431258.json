{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Table from \"../../../styled-components/Table\";\nimport Typography from \"../../../styled-components/Typography\";\nimport { useState, useEffect } from \"react\";\nimport moment from 'moment';\nexport default function GameNavigatorBottom(_ref) {\n  var game_is_started = _ref.game_is_started,\n      game_is_loading = _ref.game_is_loading,\n      hintCounter = _ref.hintCounter,\n      random_game = _ref.random_game,\n      pushNewAnswer = _ref.pushNewAnswer,\n      loadNewQuestion = _ref.loadNewQuestion,\n      startLoading = _ref.startLoading;\n\n  var _useState = useState(false),\n      answerTimeStart = _useState[0],\n      setAnswerTimeStart = _useState[1];\n\n  var checkAnswer = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(answer) {\n      var answerTimeEnd, user_answer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              answerTimeEnd = moment();\n              user_answer = answer === random_game.name ? {\n                title: random_game.name,\n                time: answerTimeEnd.diff(answerTimeStart),\n                score: Number((1000 / answerTimeEnd.diff(answerTimeStart) * 10000 * ((10 - hintCounter) / 10)).toFixed()),\n                correct: true,\n                hints_used: hintCounter\n              } : {\n                title: random_game.name,\n                time: answerTimeEnd.diff(answerTimeStart),\n                score: 0,\n                correct: false,\n                hints_used: hintCounter\n              };\n              startLoading();\n              pushNewAnswer(user_answer);\n              loadNewQuestion();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function checkAnswer(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    !game_is_loading && setAnswerTimeStart(moment());\n  }, [game_is_loading]);\n  return /*#__PURE__*/_jsx(Table, {\n    bottom: true,\n    children: game_is_started && !game_is_loading && random_game.answers ? random_game.answers.map(function (answer, i) {\n      return /*#__PURE__*/_jsx(Typography, {\n        answer: true,\n        onClick: function onClick(answer) {\n          return checkAnswer(answer.target.innerText);\n        },\n        children: answer\n      }, \"key0021\" + i);\n    }) : \"\"\n  });\n}","map":null,"metadata":{},"sourceType":"module"}