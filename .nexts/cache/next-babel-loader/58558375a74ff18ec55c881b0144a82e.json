{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var pickRandomGame = function pickRandomGame(database) {\n  var randomIndex = Math.floor(Math.random() * database.length);\n  var game = database[randomIndex];\n  database.splice(randomIndex, 1);\n  console.log(database.length);\n  return getGameDetails(game);\n};\n\nvar getGameDetails = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(game) {\n    var apishot, game_details;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id));\n\n          case 3:\n            apishot = _context.sent;\n            _context.next = 6;\n            return apishot.json();\n\n          case 6:\n            game_details = _context.sent;\n            return _context.abrupt(\"return\", getGameScreenshots(game_details));\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {});\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function getGameDetails(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getGameScreenshots = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(game) {\n    var apishot, screenshots, game_screenshots, game_with_screenshots;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/screenshots\"));\n\n          case 3:\n            apishot = _context2.sent;\n            _context2.next = 6;\n            return apishot.json();\n\n          case 6:\n            screenshots = _context2.sent;\n            game_screenshots = screenshots.results.splice(0, 3).map(function (screen) {\n              return screen = screen.image;\n            });\n            game_with_screenshots = {\n              id: game.id,\n              name: game.name,\n              altname: game.alternative_names,\n              screenshots: _toConsumableArray(game_screenshots),\n              hints: {\n                developer: game.developers[0].name,\n                released: game.released,\n                genre: game.genres[game.genres.length - 1].name\n              }\n            };\n            return _context2.abrupt(\"return\", getSimilarGames(game_with_screenshots));\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            return _context2.abrupt(\"return\", {});\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n\n  return function getGameScreenshots(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar pick3randomsFromArray = function pick3randomsFromArray(array) {\n  var source = _toConsumableArray(array);\n\n  var resultArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    var randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nvar getSimilarGames = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(game) {\n    var apishot, suggested, answers;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/suggested\"));\n\n          case 3:\n            apishot = _context3.sent;\n            _context3.next = 6;\n            return apishot.json();\n\n          case 6:\n            suggested = _context3.sent;\n            answers = [].concat(_toConsumableArray(pick3randomsFromArray(suggested.results.map(function (game) {\n              return game = game.name;\n            }))), [game.name]);\n            return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, game), {}, {\n              answers: _toConsumableArray(answers)\n            }));\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n            return _context3.abrupt(\"return\", [\"Error\", \"Error\", \"Error\"]);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 11]]);\n  }));\n\n  return function getSimilarGames(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/mnt/2E8A50178A4FDA4B/Web Development/Websites/gamergeek/gamergeek-nextjs/global/fetch.js"],"names":["pickRandomGame","database","randomIndex","Math","floor","random","length","game","splice","console","log","getGameDetails","fetch","id","apishot","json","game_details","getGameScreenshots","screenshots","game_screenshots","results","map","screen","image","game_with_screenshots","name","altname","alternative_names","hints","developer","developers","released","genre","genres","getSimilarGames","pick3randomsFromArray","array","source","resultArray","i","push","suggested","answers"],"mappings":"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","sourcesContent":["\nexport const pickRandomGame = (database) => {\n    const randomIndex = Math.floor(Math.random() * database.length)\n    const game = database[randomIndex]\n    database.splice(randomIndex, 1)\n    console.log(database.length)\n    return getGameDetails(game)\n}\n\nconst getGameDetails = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(error)\n        return {}\n    }\n}\n  \nconst getGameScreenshots = async (game) => {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            const game_screenshots = screenshots.results.splice(0,3).map(screen => screen = screen.image)\n            const game_with_screenshots = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: {\n                    developer: game.developers[0].name,\n                    released: game.released,\n                    genre: game.genres[game.genres.length-1].name,\n                },\n            }\n            return getSimilarGames(game_with_screenshots)\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n}\n\nconst pick3randomsFromArray = (array) => {\n    const source = [...array]\n    const resultArray = []\n    for (let i=0; i<3; i++) {\n        const randomIndex = Math.floor(Math.random() * source.length)\n        resultArray.push(source.splice(randomIndex, 1)[0])\n    }\n    return resultArray\n}\n\nconst getSimilarGames = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`)\n        const suggested = await apishot.json()\n        const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name]\n        return {\n            ...game,\n            answers: [ ...answers]\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return [\"Error\", \"Error\", \"Error\"]\n    }\n}"]},"metadata":{},"sourceType":"module"}