{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/cerassus/Websites/gamergeek-nextjs/components/main/challenge/containers/GameNavigatorBottom.js\";\nimport Table from \"../../../styled-components/Table\";\nimport Typography from \"../../../styled-components/Typography\";\nimport { useState, useEffect } from \"react\";\nimport moment from 'moment';\nexport default function GameNavigatorBottom({\n  game_is_started,\n  game_is_loading,\n  hintCounter,\n  random_game,\n  pushNewAnswer,\n  loadNewQuestion,\n  startLoading,\n  game_database\n}) {\n  const {\n    0: answerTimeStart,\n    1: setAnswerTimeStart\n  } = useState(false);\n\n  const checkAnswer = async answer => {\n    const answerTimeEnd = moment();\n    const user_answer = answer === random_game.name ? {\n      title: random_game.name,\n      time: answerTimeEnd.diff(answerTimeStart),\n      score: Number((1000 / answerTimeEnd.diff(answerTimeStart) * 10000 * ((10 - hintCounter) / 10)).toFixed()),\n      correct: true,\n      hints_used: hintCounter\n    } : {\n      title: random_game.name,\n      time: answerTimeEnd.diff(answerTimeStart),\n      score: 0,\n      correct: false,\n      hints_used: hintCounter\n    };\n    startLoading();\n    pushNewAnswer(user_answer);\n    loadNewQuestion(game_database);\n  };\n\n  useEffect(() => {\n    !game_is_loading && setAnswerTimeStart(moment());\n  }, [game_is_loading]);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    bottom: true,\n    children: game_is_started && !game_is_loading && random_game.answers ? random_game.answers.map((answer, i) => /*#__PURE__*/_jsxDEV(Typography, {\n      answer: true,\n      onClick: answer => checkAnswer(answer.target.innerText),\n      children: answer\n    }, \"key0021\" + i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this)) : ``\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/components/main/challenge/containers/GameNavigatorBottom.js"],"names":["Table","Typography","useState","useEffect","moment","GameNavigatorBottom","game_is_started","game_is_loading","hintCounter","random_game","pushNewAnswer","loadNewQuestion","startLoading","game_database","answerTimeStart","setAnswerTimeStart","checkAnswer","answer","answerTimeEnd","user_answer","name","title","time","diff","score","Number","toFixed","correct","hints_used","answers","map","i","target","innerText"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,kCAAlB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,mBAAT,CAA6B;AAC1CC,EAAAA,eAD0C;AAE1CC,EAAAA,eAF0C;AAG1CC,EAAAA,WAH0C;AAI1CC,EAAAA,WAJ0C;AAK1CC,EAAAA,aAL0C;AAM1CC,EAAAA,eAN0C;AAO1CC,EAAAA,YAP0C;AAQ1CC,EAAAA;AAR0C,CAA7B,EAQI;AACjB,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,KAAD,CAAtD;;AACA,QAAMc,WAAW,GAAG,MAAOC,MAAP,IAAkB;AACpC,UAAMC,aAAa,GAAGd,MAAM,EAA5B;AACA,UAAMe,WAAW,GAAGF,MAAM,KAAKR,WAAW,CAACW,IAAvB,GACd;AACEC,MAAAA,KAAK,EAAEZ,WAAW,CAACW,IADrB;AAEEE,MAAAA,IAAI,EAAEJ,aAAa,CAACK,IAAd,CAAmBT,eAAnB,CAFR;AAGEU,MAAAA,KAAK,EAAEC,MAAM,CAAC,CAAC,OAAKP,aAAa,CAACK,IAAd,CAAmBT,eAAnB,CAAL,GAAyC,KAAzC,IAAgD,CAAC,KAAGN,WAAJ,IAAiB,EAAjE,CAAD,EAAuEkB,OAAvE,EAAD,CAHf;AAIEC,MAAAA,OAAO,EAAE,IAJX;AAKEC,MAAAA,UAAU,EAAEpB;AALd,KADc,GAQd;AACEa,MAAAA,KAAK,EAAEZ,WAAW,CAACW,IADrB;AAEEE,MAAAA,IAAI,EAAEJ,aAAa,CAACK,IAAd,CAAmBT,eAAnB,CAFR;AAGEU,MAAAA,KAAK,EAAE,CAHT;AAIEG,MAAAA,OAAO,EAAE,KAJX;AAKEC,MAAAA,UAAU,EAAEpB;AALd,KARN;AAeAI,IAAAA,YAAY;AACZF,IAAAA,aAAa,CAACS,WAAD,CAAb;AACAR,IAAAA,eAAe,CAACE,aAAD,CAAf;AACD,GApBD;;AAqBAV,EAAAA,SAAS,CAAC,MAAM;AACd,KAACI,eAAD,IAAoBQ,kBAAkB,CAACX,MAAM,EAAP,CAAtC;AACD,GAFQ,EAEN,CAACG,eAAD,CAFM,CAAT;AAGA,sBACE,QAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAA,cACID,eAAe,IAAI,CAACC,eAApB,IAAuCE,WAAW,CAACoB,OAApD,GACGpB,WAAW,CAACoB,OAAZ,CAAoBC,GAApB,CAAwB,CAACb,MAAD,EAASc,CAAT,kBACxB,QAAC,UAAD;AAEE,MAAA,MAAM,MAFR;AAGE,MAAA,OAAO,EAAGd,MAAD,IAAYD,WAAW,CAACC,MAAM,CAACe,MAAP,CAAcC,SAAf,CAHlC;AAAA,gBAG8DhB;AAH9D,OACO,YAAUc,CADjB;AAAA;AAAA;AAAA;AAAA,YADA,CADH,GAOI;AARP;AAAA;AAAA;AAAA;AAAA,UADF;AAYD","sourcesContent":["import Table from \"../../../styled-components/Table\";\nimport Typography from \"../../../styled-components/Typography\";\nimport { useState, useEffect } from \"react\";\nimport moment from 'moment'\n\nexport default function GameNavigatorBottom({\n  game_is_started, \n  game_is_loading, \n  hintCounter, \n  random_game, \n  pushNewAnswer,\n  loadNewQuestion,\n  startLoading,\n  game_database }) {\n  const [answerTimeStart, setAnswerTimeStart] = useState(false)\n  const checkAnswer = async (answer) => {\n    const answerTimeEnd = moment()\n    const user_answer = answer === random_game.name\n        ? {\n            title: random_game.name,\n            time: answerTimeEnd.diff(answerTimeStart),\n            score: Number((1000/answerTimeEnd.diff(answerTimeStart)*10000*((10-hintCounter)/10)).toFixed()),\n            correct: true,\n            hints_used: hintCounter,\n          }\n        : {\n            title: random_game.name,\n            time: answerTimeEnd.diff(answerTimeStart),\n            score: 0,\n            correct: false,\n            hints_used: hintCounter,\n          };\n    startLoading()\n    pushNewAnswer(user_answer)\n    loadNewQuestion(game_database)\n  }\n  useEffect(() => {\n    !game_is_loading && setAnswerTimeStart(moment())\n  }, [game_is_loading])\n  return (\n    <Table bottom>\n      {(game_is_started && !game_is_loading && random_game.answers) \n        ? random_game.answers.map((answer, i) => (\n          <Typography \n            key={\"key0021\"+i} \n            answer \n            onClick={(answer) => checkAnswer(answer.target.innerText)}>{answer}\n          </Typography>))\n        : ``}\n    </Table>\n  )\n}"]},"metadata":{},"sourceType":"module"}