{"ast":null,"code":"import { getGameDetails } from \"../global/fetchGameDetails\";\nimport store from \"./store\";\nconst START_GAME = \"START_GAME\";\nconst RESUME_GAME = \"RESUME_GAME\";\nconst END_GAME = \"END_GAME\";\nconst SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nconst NEW_ANSWER = \"NEW_ANSWER\";\nconst CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nconst START_LOADING = \"START_LOADING\";\nconst SHOW_HINT = \"SHOW_HINT\";\nconst NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nconst REMOVE_ITEM = \"REMOVE_ITEM\";\nconst SHOW_POPUP = \"SHOW_POPUP\";\nconst SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\nconst TEST = \"TEST\";\n\nconst startGame = () => ({\n  type: START_GAME\n});\n\nconst resumeGame = () => ({\n  type: RESUME_GAME\n});\n\nconst endGame = () => ({\n  type: END_GAME\n});\n\nconst pushNewAnswer = answer => ({\n  type: NEW_ANSWER,\n  answer\n});\n\nconst showRandomGame = (game = \"\") => ({\n  type: SHOW_RANDOM_GAME,\n  game\n});\n\nconst startLoading = () => ({\n  type: START_LOADING\n});\n\nconst showHint = hint => ({\n  type: SHOW_HINT,\n  hint\n});\n\nconst clearUserScore = () => ({\n  type: CLEAR_USER_SCORE\n});\n\nconst newGameDatabase = database => ({\n  type: NEW_GAME_DATABASE,\n  database\n});\n\nconst removeItemFromDatabase = index => ({\n  type: REMOVE_ITEM,\n  index\n});\n\nconst showPopup = popup => ({\n  type: SHOW_POPUP,\n  popup\n});\n\nconst setHintCounter = () => ({\n  type: SET_HINT_COUNTER\n});\n\nconst test = payload => ({\n  type: TEST,\n  payload\n});\n\nfunction loadNewQuestion(difficulty = 0) {\n  return async function (dispatch) {\n    const game_database = store.getState().game_database;\n    const randomIndex = Math.floor(Math.random() * game_database.length);\n\n    if (game_database.length === 0) {\n      difficulty ? fetchNewGameDatabase(difficulty - 1) : dispatch(endGame());\n    } else {\n      dispatch(showRandomGame((await getGameDetails(game_database[randomIndex])) || 'error') || 'error');\n      dispatch(removeItemFromDatabase(randomIndex));\n    }\n\n    async function fetchNewGameDatabase(difficulty) {\n      const database_array = [];\n      let page = 0;\n\n      switch (difficulty) {\n        case 0:\n          {\n            page = 1;\n            break;\n          }\n\n        case 1:\n          {\n            page = 4;\n            break;\n          }\n\n        case 2:\n          {\n            page = 7;\n            break;\n          }\n\n        default:\n          return [];\n      }\n\n      for (let i = 0; i < 3; i++) {\n        try {\n          const apishot = await fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n          const data = await apishot.json();\n          database_array.push(data.results.map(game => game = game.id));\n        } catch (error) {\n          console.log(error);\n          return [];\n        }\n      }\n\n      await dispatch(newGameDatabase(database_array.flat()));\n      return dispatch(loadNewQuestion());\n    }\n  };\n}\n\nexport { START_GAME, RESUME_GAME, END_GAME, SHOW_RANDOM_GAME, NEW_ANSWER, CLEAR_USER_SCORE, START_LOADING, SHOW_HINT, NEW_GAME_DATABASE, REMOVE_ITEM, SHOW_POPUP, SET_HINT_COUNTER, TEST, startGame, resumeGame, endGame, pushNewAnswer, showRandomGame, startLoading, showHint, clearUserScore, newGameDatabase, removeItemFromDatabase, showPopup, setHintCounter, test, loadNewQuestion }; // export function loadNewQuestion() {\n//     return async function(dispatch) {\n//         const game_database = store.getState().game_database\n//         const randomIndex = Math.floor(Math.random() * game_database.length)\n//         if(game_database === 0) {\n//           dispatch(endGame()) \n//         } else {\n//             dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])))\n//             dispatch(removeItemFromDatabase(randomIndex))\n//         }\n//     }\n// }\n// function fetchNewGameDatabase(difficulty) {\n//     return async function(dispatch) {\n//         const database_array = []\n//         let page = 0\n//         switch(difficulty) {\n//             case 0: {page = 1; break;}\n//             case 1: {page = 4; break;}\n//             case 2: {page = 7; break;}\n//             default: return []\n//         }\n//         for(let i=0; i<3; i++) {\n//             try {\n//                 const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n//                 const data = await apishot.json()\n//                 database_array.push(data.results.map(game => game = game.id))\n//             }\n//             catch(error) {\n//                 console.log(error)\n//                 return []\n//             }\n//         }\n//         console.log('rgfg2')\n//          await dispatch(newGameDatabase(database_array.flat()))\n//         return dispatch(loadNewQuestion())\n//     }\n// }\n///////////// COMBINE LOAD QUESTION AND FETCHNEWGAME DB","map":null,"metadata":{},"sourceType":"module"}