{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport * as actions from \"./actions\";\n\nconst test = (state = [], action) => {\n  switch (action.type) {\n    case actions.TEST:\n      {\n        console.log(action.payload);\n        return action.payload;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst game_database = (state = [], action) => {\n  switch (action.type) {\n    case actions.NEW_GAME_DATABASE:\n      return action.database;\n\n    case actions.REMOVE_ITEM:\n      return [...state.filter((x, i) => i !== action.index && x)];\n\n    case actions.END_GAME:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst random_game = (state = \"\", action) => {\n  switch (action.type) {\n    case actions.SHOW_RANDOM_GAME:\n      return \"\" || action.game;\n    // case actions.START_LOADING: return \"\"\n\n    case actions.CLEAR_USER_SCORE:\n      return \"\";\n\n    default:\n      return state;\n  }\n};\n\nconst user_score = (state = [], action) => {\n  switch (action.type) {\n    case actions.NEW_ANSWER:\n      {\n        console.log([...state, action.answer]);\n        return [...state, action.answer];\n      }\n\n    case actions.CLEAR_USER_SCORE:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst hints_array = (state = [], action) => {\n  switch (action.type) {\n    case actions.SHOW_HINT:\n      {\n        console.log([...state, action.hint]);\n        return [...state, action.hint];\n      }\n\n    case actions.START_LOADING:\n    case actions.END_GAME:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst popup_to_show = (state = false, action) => action.type === actions.SHOW_POPUP ? action.popup : state;\n\nconst hint_counter = (state = false, action) => {\n  switch (action.type) {\n    case actions.SET_HINT_COUNTER:\n      return state + 1;\n\n    case actions.START_LOADING:\n    case actions.CLEAR_USER_SCORE:\n      return 0;\n\n    default:\n      return state;\n  }\n};\n\nconst game_status = (state = {\n  isStarted: false,\n  isLoading: false\n}, action) => {\n  switch (action.type) {\n    case actions.START_GAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isStarted: true\n      });\n\n    case actions.START_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: true\n      });\n\n    case actions.RESUME_GAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false\n      });\n\n    case actions.END_GAME:\n      return {\n        isLoading: false,\n        isStarted: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  random_game,\n  user_score,\n  hints_array,\n  game_status,\n  game_database,\n  popup_to_show,\n  hint_counter,\n  test\n});","map":null,"metadata":{},"sourceType":"module"}