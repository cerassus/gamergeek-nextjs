{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport const getGameDetails = (() => {\n  var _ref = _asyncToGenerator(function* (game) {\n    console.log(game);\n\n    try {\n      const apishot = yield fetch(`https://api.rawg.io/api/games/${game}`);\n      const game_details = yield apishot.json();\n      return getGameScreenshots(game_details);\n    } catch (error) {\n      console.log(' getGameDetails');\n      console.log(error);\n      return {};\n    }\n  });\n\n  return function getGameDetails(_x) {\n    return _ref.apply(this, arguments);\n  };\n})();\n\nconst getGameScreenshots = (() => {\n  var _ref2 = _asyncToGenerator(function* (game) {\n    try {\n      const apishot = yield fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`);\n      const screenshots = yield apishot.json();\n      const game_screenshots = pick3randomsFromArray(screenshots.results).map(function (screen) {\n        return screen = screen.image;\n      });\n      const game_with_screenshots = {\n        id: game.id,\n        name: game.name,\n        altname: game.alternative_names,\n        screenshots: [...game_screenshots],\n        hints: [{\n          developer: game.developers[0].name\n        }, {\n          released: game.released\n        }, {\n          genre: game.genres[game.genres.length - 1].name\n        }]\n      };\n      return getSimilarGames(game_with_screenshots);\n    } catch (error) {\n      console.log(error);\n      return {};\n    }\n  });\n\n  return function getGameScreenshots(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n})();\n\nconst pick3randomsFromArray = array => {\n  const source = [...array];\n  const resultArray = [];\n\n  for (let i = 0; i < 3; i++) {\n    const randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nconst getSimilarGames = (() => {\n  var _ref3 = _asyncToGenerator(function* (game) {\n    try {\n      const apishot = yield fetch(`https://api.rawg.io/api/games/${game.id}/suggested`);\n      const suggested = yield apishot.json();\n      const answers = [...pick3randomsFromArray(suggested.results.map(function (game) {\n        return game = game.name;\n      })), game.name].sort();\n      return _objectSpread(_objectSpread({}, game), {}, {\n        answers: [...answers]\n      });\n    } catch (error) {\n      console.log(error);\n      return [\"Error\", \"Error\", \"Error\"];\n    }\n  });\n\n  return function getSimilarGames(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}