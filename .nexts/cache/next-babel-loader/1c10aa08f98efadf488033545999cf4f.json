{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const fetchNewGameDatabase = async difficulty => {\n  const database_array = [];\n  let page = 0;\n\n  switch (difficulty) {\n    case 0:\n      {\n        page = 1;\n        break;\n      }\n\n    case 1:\n      {\n        page = 4;\n        break;\n      }\n\n    case 2:\n      {\n        page = 7;\n        break;\n      }\n\n    default:\n      return [];\n  }\n\n  for (let i = 0; i < 3; i++) {\n    try {\n      const apishot = await fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n      const data = await apishot.json();\n      database_array.push(data.results.map(game => game = game.id));\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  }\n\n  console.log(database_array.flat());\n  return database_array.flat();\n};\nexport const getGameDetails = async game => {\n  console.log(game);\n\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game}`);\n    const game_details = await apishot.json();\n    return getGameScreenshots(game_details);\n  } catch (error) {\n    console.log(' getGameDetails');\n    console.log(error);\n    return {};\n  }\n};\n\nconst getGameScreenshots = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`);\n    const screenshots = await apishot.json();\n    const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image);\n    const game_with_screenshots = {\n      id: game.id,\n      name: game.name,\n      altname: game.alternative_names,\n      screenshots: [...game_screenshots],\n      hints: [{\n        developer: game.developers[0].name\n      }, {\n        released: game.released\n      }, {\n        genre: game.genres[game.genres.length - 1].name\n      }]\n    };\n    return getSimilarGames(game_with_screenshots);\n  } catch (error) {\n    console.log(error);\n    return {};\n  }\n};\n\nconst pick3randomsFromArray = array => {\n  const source = [...array];\n  const resultArray = [];\n\n  for (let i = 0; i < 3; i++) {\n    const randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nconst getSimilarGames = async game => {\n  try {\n    const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`);\n    const suggested = await apishot.json();\n    const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name];\n    return _objectSpread(_objectSpread({}, game), {}, {\n      answers: [...answers]\n    });\n  } catch (error) {\n    console.log(error);\n    return [\"Error\", \"Error\", \"Error\"];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}