{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { getGameDetails } from \"../global/fetchGameDetails\";\nimport store from \"./store\";\nconst START_GAME = \"START_GAME\";\nconst RESUME_GAME = \"RESUME_GAME\";\nconst END_GAME = \"END_GAME\";\nconst SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nconst NEW_ANSWER = \"NEW_ANSWER\";\nconst CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nconst START_LOADING = \"START_LOADING\";\nconst SHOW_HINT = \"SHOW_HINT\";\nconst NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nconst REMOVE_ITEM = \"REMOVE_ITEM\";\nconst SHOW_POPUP = \"SHOW_POPUP\";\nconst SET_HINT_COUNTER = \"SET_HINT_COUNTER\";\nconst TEST = \"TEST\";\n\nconst startGame = () => ({\n  type: START_GAME\n});\n\nconst resumeGame = () => ({\n  type: RESUME_GAME\n});\n\nconst endGame = () => ({\n  type: END_GAME\n});\n\nconst pushNewAnswer = answer => ({\n  type: NEW_ANSWER,\n  answer\n});\n\nconst showRandomGame = game => ({\n  type: SHOW_RANDOM_GAME,\n  game\n});\n\nconst startLoading = () => ({\n  type: START_LOADING\n});\n\nconst showHint = hint => ({\n  type: SHOW_HINT,\n  hint\n});\n\nconst clearUserScore = () => ({\n  type: CLEAR_USER_SCORE\n});\n\nconst newGameDatabase = database => ({\n  type: NEW_GAME_DATABASE,\n  database\n});\n\nconst removeItemFromDatabase = index => ({\n  type: REMOVE_ITEM,\n  index\n});\n\nconst showPopup = popup => ({\n  type: SHOW_POPUP,\n  popup\n});\n\nconst setHintCounter = () => ({\n  type: SET_HINT_COUNTER\n});\n\nconst test = payload => ({\n  type: TEST,\n  payload\n});\n\nfunction loadNewQuestion(difficulty = 0) {\n  return (() => {\n    var _ref = _asyncToGenerator(function* (dispatch) {\n      let fetchNewGameDatabase = (() => {\n        var _ref2 = _asyncToGenerator(function* (difficulty) {\n          const database_array = [];\n          let page = 0;\n\n          switch (difficulty) {\n            case 0:\n              {\n                page = 1;\n                break;\n              }\n\n            case 1:\n              {\n                page = 4;\n                break;\n              }\n\n            case 2:\n              {\n                page = 7;\n                break;\n              }\n\n            default:\n              return [];\n          }\n\n          for (let i = 0; i < 3; i++) {\n            try {\n              const apishot = yield fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n              const data = yield apishot.json();\n              database_array.push(data.results.map(function (game) {\n                return game = game.id;\n              }));\n            } catch (error) {\n              console.log(error);\n              return [];\n            }\n          }\n\n          yield dispatch(newGameDatabase(database_array.flat()));\n          return dispatch(loadNewQuestion());\n        });\n\n        return function fetchNewGameDatabase(_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      })();\n\n      const game_database = store.getState().game_database;\n      const randomIndex = Math.floor(Math.random() * game_database.length);\n\n      if (game_database.length === 0) {\n        difficulty ? fetchNewGameDatabase(difficulty - 1) : dispatch(endGame());\n      } else {\n        dispatch(showRandomGame((yield getGameDetails(game_database[randomIndex])) || 'error') || 'error');\n        dispatch(removeItemFromDatabase(randomIndex));\n      }\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  })();\n}\n\nexport { START_GAME, RESUME_GAME, END_GAME, SHOW_RANDOM_GAME, NEW_ANSWER, CLEAR_USER_SCORE, START_LOADING, SHOW_HINT, NEW_GAME_DATABASE, REMOVE_ITEM, SHOW_POPUP, SET_HINT_COUNTER, TEST, startGame, resumeGame, endGame, pushNewAnswer, showRandomGame, startLoading, showHint, clearUserScore, newGameDatabase, removeItemFromDatabase, showPopup, setHintCounter, test, loadNewQuestion };","map":null,"metadata":{},"sourceType":"module"}