{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var getGameDetails = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(game) {\n    var apishot, game_details;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(game);\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game));\n\n          case 4:\n            apishot = _context.sent;\n            _context.next = 7;\n            return apishot.json();\n\n          case 7:\n            game_details = _context.sent;\n            return _context.abrupt(\"return\", getGameScreenshots(game_details));\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(' getGameDetails');\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {});\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n\n  return function getGameDetails(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getGameScreenshots = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(game) {\n    var apishot, screenshots, game_screenshots, game_with_screenshots;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/screenshots\"));\n\n          case 3:\n            apishot = _context2.sent;\n            _context2.next = 6;\n            return apishot.json();\n\n          case 6:\n            screenshots = _context2.sent;\n            game_screenshots = pick3randomsFromArray(screenshots.results).map(function (screen) {\n              return screen = screen.image;\n            });\n            game_with_screenshots = {\n              id: game.id,\n              name: game.name,\n              altname: game.alternative_names,\n              screenshots: _toConsumableArray(game_screenshots),\n              hints: [{\n                developer: game.developers[0].name\n              }, {\n                released: game.released\n              }, {\n                genre: game.genres[game.genres.length - 1].name\n              }]\n            };\n            return _context2.abrupt(\"return\", getSimilarGames(game_with_screenshots));\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            return _context2.abrupt(\"return\", {});\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n\n  return function getGameScreenshots(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar pick3randomsFromArray = function pick3randomsFromArray(array) {\n  var source = _toConsumableArray(array);\n\n  var resultArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    var randomIndex = Math.floor(Math.random() * source.length);\n    resultArray.push(source.splice(randomIndex, 1)[0]);\n  }\n\n  return resultArray;\n};\n\nvar getSimilarGames = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(game) {\n    var apishot, suggested, answers;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(\"https://api.rawg.io/api/games/\".concat(game.id, \"/suggested\"));\n\n          case 3:\n            apishot = _context3.sent;\n            _context3.next = 6;\n            return apishot.json();\n\n          case 6:\n            suggested = _context3.sent;\n            answers = [].concat(_toConsumableArray(pick3randomsFromArray(suggested.results.map(function (game) {\n              return game = game.name;\n            }))), [game.name]).sort();\n            return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, game), {}, {\n              answers: _toConsumableArray(answers)\n            }));\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n            return _context3.abrupt(\"return\", [\"Error\", \"Error\", \"Error\"]);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 11]]);\n  }));\n\n  return function getSimilarGames(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/global/fetchGameDetails.js"],"names":["getGameDetails","game","console","log","fetch","apishot","json","game_details","getGameScreenshots","id","screenshots","game_screenshots","pick3randomsFromArray","results","map","screen","image","game_with_screenshots","name","altname","alternative_names","hints","developer","developers","released","genre","genres","length","getSimilarGames","array","source","resultArray","i","randomIndex","Math","floor","random","push","splice","suggested","answers","sort"],"mappings":"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","sourcesContent":["export const getGameDetails = async (game) => {\n    console.log(game)\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game}`)\n        const game_details = await apishot.json()\n        return getGameScreenshots(game_details)\n    }\n    catch(error) {\n        console.log(' getGameDetails')\n        console.log(error)\n        return {}\n    }\n}\n  \nconst getGameScreenshots = async (game) => {\n        try {\n            const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/screenshots`)\n            const screenshots = await apishot.json()\n            const game_screenshots = pick3randomsFromArray(screenshots.results).map(screen => screen = screen.image)\n            const game_with_screenshots = {\n                id: game.id,\n                name: game.name,\n                altname: game.alternative_names,\n                screenshots: [...game_screenshots],\n                hints: [\n                    {developer: game.developers[0].name},\n                    {released: game.released},\n                    {genre: game.genres[game.genres.length-1].name},\n                ],\n            }\n            return getSimilarGames(game_with_screenshots)\n        }\n        catch(error) {\n            console.log(error)\n            return {}\n        }\n}\n\nconst pick3randomsFromArray = (array) => {\n    const source = [...array]\n    const resultArray = []\n    for (let i=0; i<3; i++) {\n        const randomIndex = Math.floor(Math.random() * source.length)\n        resultArray.push(source.splice(randomIndex, 1)[0])\n    }\n    return resultArray\n}\n\nconst getSimilarGames = async (game) => {\n    try {\n        const apishot = await fetch(`https://api.rawg.io/api/games/${game.id}/suggested`)\n        const suggested = await apishot.json()\n        const answers = [...pick3randomsFromArray(suggested.results.map(game => game = game.name)), game.name].sort()\n        return {\n            ...game,\n            answers: [ ...answers]\n        }\n    }\n    catch(error) {\n        console.log(error)\n        return [\"Error\", \"Error\", \"Error\"]\n    }\n}"]},"metadata":{},"sourceType":"module"}