{"ast":null,"code":"import { getGameDetails } from \"../global/fetchGameDetails\";\nexport const START_GAME = \"START_GAME\";\nexport const RESUME_GAME = \"RESUME_GAME\";\nexport const END_GAME = \"END_GAME\";\nexport const SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nexport const NEW_ANSWER = \"NEW_ANSWER\";\nexport const CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nexport const START_LOADING = \"START_LOADING\";\nexport const SHOW_HINT = \"SHOW_HINT\";\nexport const NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const CHANGE_POPUP = \"CHANGE_POPUP\";\nexport const SKIP_QUESTION = \"SKIP_QUESTION\";\nexport const startGame = () => ({\n  type: START_GAME\n});\nexport const resumeGame = () => ({\n  type: RESUME_GAME\n});\nexport const endGame = () => ({\n  type: END_GAME\n});\nexport const showRandomGame = game => ({\n  type: SHOW_RANDOM_GAME,\n  game\n});\nexport const pushNewAnswer = answer => ({\n  type: NEW_ANSWER,\n  answer\n});\nexport const startLoading = () => ({\n  type: START_LOADING\n});\nexport const showHint = hint => ({\n  type: SHOW_HINT,\n  hint\n});\nexport const clearUserScore = () => ({\n  type: CLEAR_USER_SCORE\n});\nexport const newGameDatabase = database => ({\n  type: NEW_GAME_DATABASE,\n  database\n});\nexport const removeItemFromDatabase = index => ({\n  type: REMOVE_ITEM,\n  index\n});\nexport const changePopup = popup => ({\n  type: CHANGE_POPUP,\n  popup\n});\nexport const skipQuestion = () => ({\n  type: SKIP_QUESTION\n});\nexport function loadNewQuestion(game_database) {\n  return async function (dispatch) {\n    dispatch(startLoading());\n    const randomIndex = Math.floor(Math.random() * game_database.length);\n\n    if (game_database === 0) {\n      dispatch(endGame());\n    } else {\n      dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])));\n      dispatch(removeItemFromDatabase(randomIndex));\n    }\n  };\n}\nexport function fetchNewGameDatabase(difficulty) {\n  return async function (dispatch) {\n    dispatch(startLoading());\n    const database_array = [];\n    let page = 0;\n\n    switch (difficulty) {\n      case 0:\n        {\n          page = 1;\n          break;\n        }\n\n      case 1:\n        {\n          page = 4;\n          break;\n        }\n\n      case 2:\n        {\n          page = 7;\n          break;\n        }\n\n      default:\n        return [];\n    }\n\n    for (let i = 0; i < 3; i++) {\n      try {\n        const apishot = await fetch(`https://api.rawg.io/api/games?page=${page + i}&page_size=40`);\n        const data = await apishot.json();\n        database_array.push(data.results.map(game => game = game.id));\n      } catch (error) {\n        console.log(error);\n        return [];\n      }\n    }\n\n    console.log(database_array.flat());\n    return database_array.flat();\n  };\n}","map":{"version":3,"sources":["/home/cerassus/Websites/gamergeek-nextjs/redux/actions.js"],"names":["getGameDetails","START_GAME","RESUME_GAME","END_GAME","SHOW_RANDOM_GAME","NEW_ANSWER","CLEAR_USER_SCORE","START_LOADING","SHOW_HINT","NEW_GAME_DATABASE","REMOVE_ITEM","CHANGE_POPUP","SKIP_QUESTION","startGame","type","resumeGame","endGame","showRandomGame","game","pushNewAnswer","answer","startLoading","showHint","hint","clearUserScore","newGameDatabase","database","removeItemFromDatabase","index","changePopup","popup","skipQuestion","loadNewQuestion","game_database","dispatch","randomIndex","Math","floor","random","length","fetchNewGameDatabase","difficulty","database_array","page","i","apishot","fetch","data","json","push","results","map","id","error","console","log","flat"],"mappings":"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","sourcesContent":["import { getGameDetails } from \"../global/fetchGameDetails\"\n\nexport const START_GAME = \"START_GAME\";\nexport const RESUME_GAME = \"RESUME_GAME\";\nexport const END_GAME = \"END_GAME\";\nexport const SHOW_RANDOM_GAME = \"SHOW_RANDOM_GAME\";\nexport const NEW_ANSWER = \"NEW_ANSWER\";\nexport const CLEAR_USER_SCORE = \"CLEAR_USER_SCORE\";\nexport const START_LOADING = \"START_LOADING\";\nexport const SHOW_HINT = \"SHOW_HINT\";\nexport const NEW_GAME_DATABASE = \"NEW_GAME_DATABASE\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const CHANGE_POPUP = \"CHANGE_POPUP\";\nexport const SKIP_QUESTION = \"SKIP_QUESTION\";\n\nexport const startGame = () => ({\n    type: START_GAME,\n})\n\nexport const resumeGame = () => ({\n    type: RESUME_GAME,\n})\n\nexport const endGame = () => ({\n    type: END_GAME,\n})\n\nexport const showRandomGame = (game) => ({\n    type: SHOW_RANDOM_GAME,\n    game,\n})\n\nexport const pushNewAnswer = (answer) => ({\n    type: NEW_ANSWER,\n    answer,\n})\n\nexport const startLoading = () => ({\n    type: START_LOADING,\n})\n\nexport const showHint = (hint) => ({\n    type: SHOW_HINT,\n    hint,\n})\n\nexport const clearUserScore = () => ({\n    type: CLEAR_USER_SCORE,\n})\n\nexport const newGameDatabase = (database) => ({\n    type: NEW_GAME_DATABASE,\n    database,\n})\n\nexport const removeItemFromDatabase = (index) => ({\n    type: REMOVE_ITEM,\n    index,\n})\n\nexport const changePopup = (popup) => ({\n    type: CHANGE_POPUP,\n    popup,\n})\n\nexport const skipQuestion = () => ({\n    type: SKIP_QUESTION,\n})\n\nexport function loadNewQuestion(game_database) {\n    return async function(dispatch) {\n        dispatch(startLoading())\n        const randomIndex = Math.floor(Math.random() * game_database.length)\n        if(game_database === 0) {\n          dispatch(endGame()) \n        } else {\n            dispatch(showRandomGame(await getGameDetails(game_database[randomIndex])))\n            dispatch(removeItemFromDatabase(randomIndex))\n        }\n    }\n}\n\nexport function fetchNewGameDatabase(difficulty) {\n    return async function(dispatch) {\n        dispatch(startLoading())\n        const database_array = []\n        let page = 0\n        switch(difficulty) {\n            case 0: {page = 1; break;}\n            case 1: {page = 4; break;}\n            case 2: {page = 7; break;}\n            default: return []\n        }\n        for(let i=0; i<3; i++) {\n            try {\n                const apishot = await fetch(`https://api.rawg.io/api/games?page=${page+i}&page_size=40`)\n                const data = await apishot.json()\n                database_array.push(data.results.map(game => game = game.id))\n            }\n            catch(error) {\n                console.log(error)\n                return []\n            }\n        }\n        console.log(database_array.flat())\n        return database_array.flat()\n    }\n}"]},"metadata":{},"sourceType":"module"}